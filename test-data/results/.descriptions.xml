<inspections profile="RStudio">
  <group name="EditorConfig">
    <inspection shortName="EditorConfigKeyCorrectness" displayName="Correctness of EditorConfig key" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unknown property values.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigOptionRedundancy" displayName="Option redundancy" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports options that override other options but have the same properties and values.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigShadowingOption" displayName="Uniqueness of occurrence of EditorConfig option" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties that disable any other properties declared earlier in the file.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigReferenceCorrectness" displayName="Correctness of identifier reference" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports invalid referenced identifiers.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigPatternRedundancy" displayName="Redundancy of pattern enumeration" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports redundancy in patterns.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigRootDeclarationUniqueness" displayName="Uniqueness of top-level declaration" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Checks that an EditorConfig file has only one top-level declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EditorConfigEmptyHeader" displayName="Empty header" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections which have an empty file wildcard pattern.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigDeprecatedDescriptor" displayName="Deprecation of EditorConfig element" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports deprecated properties.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigListAcceptability" displayName="List unexpected" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports lists of values that can&apos;t be used in current context.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigHeaderUniqueness" displayName="Uniqueness of EditorConfig section" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections which match the same file patterns.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigEmptySection" displayName="Emptiness of EditorConfig section" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections which don&apos;t have any properties.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigWildcardRedundancy" displayName="Wildcard redundancy" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports wildcard patterns that could be safely removed.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigUnexpectedComma" displayName="Unexpected comma" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any commas that are not allowed in the current context.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigValueCorrectness" displayName="Correctness of EditorConfig value" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any unexpected values.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigRootDeclarationCorrectness" displayName="Correctness of root declaration" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unexpected top-level declarations.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EditorConfigPairAcceptability" displayName="Pair unexpected" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports pairs of values that can&apos;t be used in current context.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigSpaceInHeader" displayName="Space in header" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports any suspicious spaces in the section&apos;s file wildcard pattern. Even though spaces can be used in the wildcard patterns, they are likely to be a typo.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigNoMatchingFiles" displayName="No matching files" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections which don&apos;t match any files in the project.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigCharClassRedundancy" displayName="Redundant char class" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports the file wildcard patterns with charclasses which have less than two symbols.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigPartialOverride" displayName="Partial override" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports header with glob that has suspicious intersection with one of related globs. Example:
[{foo, bar}] and [{foo, bas}] have non-empty intersection and none of them is subcase of the other.
This is likely to be a typo.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigShadowedOption" displayName="Meaningfulness of EditorConfig option" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports properties which don&apos;t affect the resulting code style.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigMissingRequiredDeclaration" displayName="Missing required declaration" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports declarations that miss required parts.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigNumerousWildcards" displayName="Too many wildcards" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports sections that contain too many wildcards. They might lead to performance issues.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EditorConfigPatternEnumerationRedundancy" displayName="Redundant pattern enumeration" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports pattern enumerations that contain only one possible pattern.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigCharClassLetterRedundancy" displayName="Duplicate letter in char class" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports duplicate characters in the section&apos;s file wildcard pattern.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigValueUniqueness" displayName="Uniqueness of value in list" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports repeated values in the list of the prohibited value repetitions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EditorConfigUnusedDeclaration" displayName="Unused declaration" enabled="true">&lt;!-- Copyright 2000-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file. --&gt;
&lt;html&gt;
&lt;body&gt;
Reports unused declarations.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="HTML">
    <inspection shortName="CheckValidXmlInScriptTagBody" displayName="Malformed content of &lt;script&gt; tag" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that the &lt;b&gt;script&lt;/b&gt; tag content is valid XML. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlPresentationalElement" displayName="Presentational HTML tag" enabled="false">&lt;html&gt;
&lt;body&gt;
Highlights pure presentational HTML tags and provides the ability to replace them with CSS or with other tags. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckImageSize" displayName="Image size mismatch" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attribute values of &lt;code&gt;IMG&lt;/code&gt; tag
that are different from the width and height of the original image. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlMissingClosingTag" displayName="Missing closing tag" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports HTML elements without a closing tag.
Some coding styles require a closing tag on HTML elements even where this is optional.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlDeprecatedTag" displayName="Deprecated HTML tag" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights deprecated HTML tags and provides ability to replace them with CSS or with other tags for some of them. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RequiredAttributes" displayName="Missing required attribute" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports XML/HTML tags with missing mandatory attributes.
You can specify attribute names that should not be reported.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="HtmlUnknownAttribute" displayName="Unknown HTML tag attribute" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unknown HTML tag attributes as invalid, and lets mark such attributes as Custom to avoid highlighting them as
invalid. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckEmptyScriptTag" displayName="Empty tag" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports empty tags (like &lt;b&gt;script&lt;/b&gt; ) that do not work in some browsers.
The validation works in html or jsp file types. &lt;br&gt;


&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownTarget" displayName="File reference problems" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks unresolved file references in HTML. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownTag" displayName="Unknown HTML tag" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unknown HTML tags, and lets mark such tags as Custom to avoid highlighting them as unknown in future. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlExtraClosingTag" displayName="Redundant closing tag for HTML element" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection spots extra closing tag for the empty elements like IMG or BR. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownBooleanAttribute" displayName="Unknown HTML boolean tag attribute" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights HTML non-boolean tag attributes without value as invalid, and lets mark such attributes as Custom to avoid highlighting them as
invalid.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlNonExistentInternetResource" displayName="Non-existent web resource" enabled="false">&lt;html&gt;
&lt;body&gt;
Highlights links to non-existent web resources.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownAnchorTarget" displayName="Anchor reference problems" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks unresolved anchor references in HTML. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="YAML">
    <inspection shortName="YAMLSchemaValidation" displayName="Validation by JSON Schema" enabled="true">&lt;html&gt;
&lt;body&gt;
Validates YAML file against a JSON Schema, if the schema is specified
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLRecursiveAlias" displayName="Recursive alias" enabled="true">&lt;html&gt;
&lt;body&gt;
Alias can&apos;t be recursive and used inside data referenced by corresponding anchor
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLUnusedAnchor" displayName="Unused anchor" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unused anchors.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLDuplicatedKeys" displayName="Duplicated YAML keys" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects duplicated keys in YAML files and highlights them in the editor.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="YAMLUnresolvedAlias" displayName="Unresolved alias" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about unresolved aliases in yaml files
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="docker-compose">
    <inspection shortName="ComposeUnknownKeys" displayName="Unknown docker-compose YAML keys" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection finds unrecognized keys in `docker-compose` files and highlights them in the editor.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComposeUnknownValues" displayName="Unknown docker-compose YAML values" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection finds unrecognized values in `docker-compose` files and highlights them in the editor.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Data flow">
    <inspection shortName="ReuseOfLocalVariableJS" displayName="Reuse of local variable" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any instances where JavaScript local variables are &quot;reused&quot;, overwriting their
values with new values unrelated to their original use.  Such local variable reuse may be confusing,
as the intended semantics of the local variable may vary with each use.  It may also be
prone to bugs, if code changes result in values that were thought to be overwritten actually
being live.   It is good practices to keep variable lifetimes as short as possible, and not
reuse local variables for the sake of brevity.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryLocalVariableJS" displayName="Redundant local variable" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any instances of unnecessary JavaScript local variables, which add
nothing to the comprehensibility of a function.  Variables caught include local variables
which are immediately returned, local variables that are immediately assigned to another
variable and then not used, and local variables which always have the same value as another
local variable or parameter.
&lt;p&gt;
Use the checkbox below to have this inspection ignore variables which are immediately
returned or thrown.  Some coding styles suggest using such variables for clarity and
ease of debugging.
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="BashSupport">
    <inspection shortName="BashFixShebang" displayName="Fix unusal Shebang" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection can replace unknown shebang commands with one of the registered commands, like &lt;pre&gt;/bin/sh&lt;/pre&gt;.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashInternalCommandFunctionOverride" displayName="Function overrides internal command" enabled="true">&lt;html&gt;
&lt;body&gt;
Detects function definitions which override built-in Bash commands.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashWrapFunction" displayName="Wrap function body in {}" enabled="true">&lt;html&gt;
&lt;body&gt;
If the body of a function is not yet wrapped in curly brackets {} this inspection offers a quickfix to automatically do this.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashUnknownFileDescriptor" displayName="Unknown filedescriptor. Only 0 to 9 are valid." enabled="true">&lt;html&gt;
&lt;body&gt;
Bash supports the numbers 0-9 to identify filedescriptors. 0 is stdin, 1 is stdout and 2 is stderr.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashFunctionNamesShouldBeLowerSnakeCase" displayName="Function name is not in lower snake case" enabled="false"/>
    <inspection shortName="BashReplaceWithDoubleBrackets" displayName="Convert simple brackets to double brackets" enabled="true"/>
    <inspection shortName="BashUnusedFunction" displayName="Unused function definition" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights function definitions which are never called in a Bash script.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashUnusedFunctionParams" displayName="Unused function parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
Detects unused function parameter values. If the caller passes a parameter value which is not used inside of the function then it is highlighted.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashSimpleVarUsage" displayName="Simple variable usage" enabled="true">&lt;html&gt;
&lt;body&gt;
Use of a variable like $X instead of ${X}.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashMissingInclude" displayName="Missing include file" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks the filenames of include directives. If a given file doesn&apos;t exist then the element is highlighted as an error. Includes of files given as runtime values (e.g. variables) are not evaluated.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashRecursiveInclusion" displayName="Recursive file inclusion" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for recursive file inclusion. Currently it can highlight the inclusion of a file in itself.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashBuiltInVariable" displayName="Change to a built-in shell variable" enabled="true">&lt;html&gt;
&lt;body&gt;
Attempt to change an internal, read-only shell variable.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashWrapWord" displayName="Convert to a quoted or unquoted string" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection can convert text which is not in a string into a string.
&lt;!-- tooltip end --&gt;
For example &quot;echo a&quot; can be converted into &quot;echo &apos;a&apos;&quot;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashFloatArithmetic" displayName="Integer division with remainder found." enabled="true">&lt;html&gt;
&lt;body&gt;
Detects floating point quotients in static expressions (e.g. &lt;em&gt;&apos;3/4&apos;&lt;/em&gt;) which will give a probably unexpected result.
&lt;!-- tooltip end --&gt;
Floating arithmetic is not supported by Bash.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashAddShebang" displayName="Add missing shebang line to file" enabled="true">&lt;html&gt;
&lt;body&gt;
If a file does not yet have a shebang line this inspection offers a file wide quickfix to add one.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashUnresolvedVariable" displayName="Unresolved variable" enabled="true">&lt;html&gt;
&lt;body&gt;
An unresolved variable has not been declared in earlier parts of the script.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashSimpleArrayUse" displayName="Simple use of array variable" enabled="true">&lt;html&gt;
&lt;body&gt;
Detects use of array variables without array element qualifiers.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashReplaceWithSubshell" displayName="Convert backquote to subshell commands" enabled="false">&lt;html&gt;
&lt;body&gt;
Replaces a backtick command with a corresponding subshell expression.&lt;br/&gt;
&lt;!-- tooltip end --&gt;
For example: `echo a` would be replaced by $(echo a).
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashReplaceWithBackquote" displayName="Convert subshell to backquote command" enabled="false">&lt;html&gt;
&lt;body&gt;
Replaces a subshell expression with a backtick expression.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;For example: $(echo a) would be replaced by `echo a`.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashGloballyRegisteredVariable" displayName="Globally registered variable" enabled="true">&lt;html&gt;
&lt;body&gt;
An unresolved variable which has been registered as global variable in BashSupport&apos;s preferences.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashEvaluateArithmeticExpression" displayName="Evaluate arithmetic expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Replaces a static arithmetic expression with the result.&lt;br/&gt;
&lt;!-- tooltip end --&gt;
For example the expression &lt;em&gt;1 + 3 * 4&lt;/em&gt; would be replaced with the evaluated result of &lt;em&gt;13&lt;/em&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashReadOnlyVariable" displayName="Read-only variable" enabled="true">&lt;html&gt;
&lt;body&gt;
Attempt to change a read-only variable. Read-only variables can not be modified once they are declared.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashGlobalLocalVarDef" displayName="Global definition of local variable" enabled="true">&lt;html&gt;
&lt;body&gt;
A global variable declared as &lt;code&gt;local&lt;/code&gt; is invalid.
&lt;!-- tooltip end --&gt;
Text after this comment will not be shown in tooltips.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashDuplicateFunction" displayName="Duplicate function definition" enabled="true">&lt;html&gt;
&lt;body&gt;
Detects duplicate function definitions and highlights the double definitions.
&lt;!-- tooltip end --&gt;
&lt;br/&gt; There is a chance of false positives if the earlier definition is inside of a conditional command.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BashEvaluateExpression" displayName="Evaluate expansion" enabled="true">&lt;html&gt;
&lt;body&gt;
Replaces a Bash expansion with the evaluated result.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;Only static value expansions are understood by this expansion, i.e. if an expansion contains a variable then the quickfix can not be applied.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Naming conventions">
    <inspection shortName="JSNonASCIINames" displayName="Identifiers with non-ASCII symbols" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports names containing non-ASCII symbols.&lt;br/&gt;&lt;br/&gt;
If &apos;Allow only ASCII names&apos; option is used, reports all names containing non-ASCII symbols.&lt;br/&gt;
Otherwise reports all names, containing both ASCII and non-ASCII symbols.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSClassNamingConvention" displayName="Class naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports instances of JavaScript classes and functions annotated with JSDoc @constructor or @class tags whose names are
either too short, too long, or do not follow the specified regular expression pattern.
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression
  expected for classes names.
  (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="LocalVariableNamingConventionJS" displayName="Local variable naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports instances of JavaScript local variables whose names are either too short, too
                long, or do not follow
                the specified regular expression pattern.
                &lt;p&gt;
                    Use the fields provided below to specify mininum length, maximum length and regular expression
                    expected for local variables names.
                    (Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ParameterNamingConventionJS" displayName="Function parameter naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports instances of JavaScript function parameters whose names are either too short,
                too long, or do not follow the specified regular expression pattern.
                &lt;p&gt;
                    Use the fields provided below to specify mininum length, maximum length and regular expression
                    expected for local variables names.
                    (Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FunctionNamingConventionJS" displayName="Function naming convention" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports instances of JavaScript functions whose names are either too short, too
long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
  Use the fields provided below to specify minimum length, maximum length and regular expression
  expected for function names.
  (Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Code style issues">
    <inspection shortName="ConstantOnLHSOfComparisonJS" displayName="Constant on left side of comparison" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports on comparison operations with constant values on their left-hand side. Some
                coding conventions
                specify that constants should be on the right-hand side of comparisons.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSDeclarationsAtScopeStart" displayName="Variable declarations are at the scope start" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection checks that all local variables declarations are at the beginning of the current function.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSArrowFunctionBracesCanBeRemoved" displayName="Braces around arrow function body can be removed" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights arrow functions where the body contains exactly one statement and can be converted to concise syntax without braces.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;code&gt;
    let incrementer = (x) =&gt; {return x + 1};
  &lt;/code&gt;
&lt;/p&gt; to
&lt;p&gt;
  &lt;code&gt;
    let incrementer = (x) =&gt; x + 1;
  &lt;/code&gt;
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSUndefinedPropertyAssignment" displayName="Undefined property assignment" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports assignments to undefined properties of explicitly type-annotated variables.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ChainedFunctionCallJS" displayName="Chained function call" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any JavaScript function calls whose target is another function call.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConstantOnRHSOfComparisonJS" displayName="Constant on right side of comparison" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports on comparison operations with constant values on their right-hand side. Some
                coding conventions
                specify that constants should be on the left-hand side of comparisons.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnterminatedStatementJS" displayName="Unterminated statement" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports Javascript statements that may be erroneously not terminated by a semicolon or a newline.
&lt;p&gt;If &apos;terminate statements with semicolons&apos; is selected in code style settings, reports
  all statements which do not end with a semicolon.
  While line-breaks may be used instead of semicolons to terminate JavaScript statements,
  some coding styles prefer the semicolon for consistency with the other languages.
&lt;/p&gt;


&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CssRedundantUnit" displayName="Redundant measure unit" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights zero values with specified unit of measurement.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSRemoveUnnecessaryParentheses" displayName="Unnecessary parentheses" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports parentheses when they are redundant.
&lt;!-- tooltip end --&gt;
&lt;p&gt;In expressions:&lt;/p&gt;
&lt;code&gt;var x = ((1) + 2) + 3&lt;/code&gt;
&lt;p&gt;Arrow function argument lists:&lt;/p&gt;
&lt;code&gt;var incrementer = (x) =&gt; x + 1&lt;/code&gt;

&lt;p&gt;TypeScript and Flow type declarations:&lt;/p&gt;
&lt;code&gt;type Card = (Suit &amp; Rank) | (Suit &amp; Number)&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonBlockStatementBodyJS" displayName="Non-block statement body" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports instances of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt;,
                and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;with&lt;/font&gt;&lt;/b&gt; statements whose bodies are not block statements.  While
                such statements are legal JavaScript, it is usually safer for downstream maintenance to use
                the code blocks for statement bodies.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NestedFunctionCallJS" displayName="Nested function call" enabled="false">&lt;html&gt;
&lt;body&gt;

              Reports any JavaScript function calls used as arguments to another function call.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ChainedEqualityJS" displayName="Chained equality" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of chained equality comparisons (i.e. &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;
                a==b==c&lt;/font&gt;&lt;/b&gt;) in JavaScript code.  Such comparisons are confusing.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CssMissingSemicolon" displayName="Missing semicolon" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects missing semicolon at the end of declarations. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Less">
    <inspection shortName="LessResolvedByNameOnly" displayName="Resolved by name only" enabled="true">This inspection warns about less elements that are not imported explicitly and resolved through all project less-files only by name.
    You have no guaranties that these elements will be resolved at the production.

</inspection>
    <inspection shortName="LessUnresolvedVariable" displayName="Unresolved variable" enabled="true">This inspection warns about less variable references which can&apos;t be resolved to any valid target.
</inspection>
    <inspection shortName="LessUnresolvedMixin" displayName="Unresolved mixin" enabled="true">This inspection warns about less mixin invocation which can&apos;t be resolved to any valid target.

</inspection>
  </group>
  <group name="Markdown">
    <inspection shortName="MarkdownUnresolvedFileReference" displayName="Unresolved file references" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in Markdown file.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Invalid elements">
    <inspection shortName="CssInvalidHtmlTagReference" displayName="Invalid CSS selector" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects unknown CSS selectors and provides ability to declare them as a class or an id. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssUnresolvedClass" displayName="Unresolved CSS Class" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about CSS class references which cannot be resolved to any valid target.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssInvalidImport" displayName="Misplaced CSS @import" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects misplaced CSS @import declarations. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssUnresolvedCustomPropertySet" displayName="Unresolved CSS Custom Property Set" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about CSS custom property set variable references which cannot be resolved to any valid target.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssUnknownProperty" displayName="Unknown CSS property" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights CSS properties that are unknown or used in wrong context, and allows to define such properties as &apos;custom&apos; to avoid highlighting them as invalid.&lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssInvalidMediaFeature" displayName="Invalid CSS media feature" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects unknown media features and illegal media feature values.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CssInvalidAtRule" displayName="Unknown CSS at-rule" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects unknown CSS at-rules. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssInvalidElement" displayName="Invalid CSS element" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects inappropriate values assigned to CSS attributes. For example,
invalid measurement units or values out of range. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssUnresolvedCustomProperty" displayName="Unresolved CSS Custom Property" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about CSS custom property variable references which cannot be resolved to any valid target.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssInvalidPropertyValue" displayName="Invalid CSS property value" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects illegal property&apos;s values.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssInvalidFunction" displayName="Invalid CSS function" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects unknown functions and illegal function parameters.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CssUnknownTarget" displayName="Unknown file or directory" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks references to files and directories. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssNegativeValue" displayName="Negative CSS value" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects negative values assigned to CSS attributes that should never be
negative. For example, object width or height. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssInvalidPseudoSelector" displayName="Invalid CSS pseudo-selector" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects unknown and inappropriate pseudo-classes and pseudo-elements.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssInvalidCharsetRule" displayName="Invalid CSS @charset rule" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects misplaced @charset rules and inappropriate charset values.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Python">
    <inspection shortName="PyMethodFirstArgAssignmentInspection" displayName="Reassignment of method&apos;s first argument" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects cases when first parameter, such as &amp;#39;self&amp;#39; or &amp;#39;cls&amp;#39;, is reassigned in a method.
In most cases imaginable, there&amp;#39;s no point in such reassignment, and it indicates an error.
&lt;/body&gt;&lt;/html&gt;
</inspection>
    <inspection shortName="PyAugmentAssignmentInspection" displayName="Assignment can be replaced with augmented assignment" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights assignment that can be replaced with augmented assignment.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PySuperArgumentsInspection" displayName="Wrong arguments to call super" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection check that in any call to super(A, B), B either is an instance of A or a subclass of A.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyPropertyDefinitionInspection" displayName="Property definitions" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that arguments to &lt;code&gt;property()&lt;/code&gt; and functions annotated with
&lt;code&gt;@property&lt;/code&gt; and friends look reasonably.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyNonAsciiCharInspection" displayName="File contains non-ASCII character" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects file contains non-ASCII characters and doesn&amp;#39;t have an encoding declaration at the top.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyFromFutureImportInspection" displayName="from __future__ import must be the first executable statement" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects &lt;code&gt;&apos;from __future__ import&apos;&lt;/code&gt; statements which are used not in the beginning of a file.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyStatementEffectInspection" displayName="Statement has no effect" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects statements without any effect.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyDecoratorInspection" displayName="Class specific decorator on method outside class" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports usages of @classmethod or @staticmethod decorators on functions outside of a class.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyBDDParametersInspection" displayName="BDD step definition arguments inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that step definition functions have correct arguments
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyInconsistentIndentationInspection" displayName="Inconsistent indentation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports inconsistent indentation in Python source files (for example, use of a mixture
of tabs and spaces).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PySimplifyBooleanCheckInspection" displayName="Boolean variable check can be simplified" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects equality comparison with a boolean literal.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyDataclassInspection" displayName="Dataclass definition and usages" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects invalid definitions and usages of classes created with `dataclasses` or `attr` modules.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyTupleAssignmentBalanceInspection" displayName="Tuple assignment balance is incorrect" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection check that the number of expressions on right-hand side and targets on left-hand side are the same.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyMethodParametersInspection" displayName="Methods having troubles with first parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection looks for methods that lack a first parameter (which is usually named &lt;code&gt;self&lt;/code&gt; ).
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyArgumentEqualDefaultInspection" displayName="Argument passed to function is equal to default parameter value" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection highlights situations, where argument passed to function is equal to default parameter value
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyStubPackagesCompatibilityInspection" displayName="Stub packages compatibility inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that a stub package supports the version of the corresponding runtime package.
&lt;p&gt;
Stub package is a package that contains type information for some runtime package.
See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0561/&quot;&gt;PEP 561&lt;/a&gt; for more details.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyUnreachableCodeInspection" displayName="Unreachable code" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects code which can not be normally reached.
&lt;/body&gt;&lt;/html&gt;
</inspection>
    <inspection shortName="PyPackageRequirementsInspection" displayName="Package requirements" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about imported or required, but not installed packages.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyBehaveInspection" displayName="BDD Behave-specific inspection" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks several Python Behave BDD framework cases like:
&lt;ul&gt;
  &lt;li&gt;Step definition file has no &lt;code&gt;from behave import *&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Folder with steps definition is called &lt;code&gt;steps&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyNoneFunctionAssignmentInspection" displayName="Assigning function call that doesn&apos;t return anything" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection is similar to pylint inspection E1111. It highlights situations when an assignment is done on a function call but the
inferred function doesn&apos;t return anything.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyArgumentListInspection" displayName="Incorrect call arguments" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports discrepancies between declared parameters and actual arguments, as well as
incorrect arguments (e.g. duplicate named arguments) and incorrect argument order. Decorators are analyzed, too.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyDunderSlotsInspection" displayName="Definition of __slots__ in a class" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects invalid definition of __slots__ in a class.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyMandatoryEncodingInspection" displayName="No encoding specified for file" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects lack of encoding magic comment for file.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyDefaultArgumentInspection" displayName="Default argument is mutable" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects when a mutable value as list or dictionary is detected in a default value for an argument. &lt;br/&gt;
Default argument values are evaluated only once at function definition time, which means that modifying the
default value of the argument will affect all subsequent calls of the function.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyUnresolvedReferencesInspection" displayName="Unresolved references" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects names that should resolve but don&apos;t.
Due to dynamic dispatch and duck typing, this is possible in a limited but useful
number of cases. Top-level and class-level items are supported better than instance items.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyReturnFromInitInspection" displayName="__init__ method that returns a value" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports occurrences of &lt;code&gt;return&lt;/code&gt; statements with a return value inside
&lt;code&gt;__init__&lt;/code&gt; methods of classes. A constructor should not return any value.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyAssignmentToLoopOrWithParameterInspection" displayName="Assignment to &apos;for&apos; loop or &apos;with&apos; statement parameter" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for cases when you rewrite loop variable with inner loop
&lt;pre style=&quot;font-family: monospace&quot;&gt;
    for i in xrange(5):
      for i in xrange(20, 25):
          print(&quot;Inner&quot;, i)
      print(&quot;Outer&quot;, i)
  &lt;/pre&gt;

It also warns you if variable declared in &lt;code&gt;with&lt;/code&gt; statement is redeclared inside of statement body:
&lt;pre style=&quot;font-family: monospace&quot;&gt;
    with open(&quot;file&quot;) as f:
      f.read()
      with open(&quot;file&quot;) as f:
  &lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CythonUsageBeforeDeclarationInspection" displayName="Cython variable usage before declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about Cython variables being referenced before declaration.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyListCreationInspection" displayName="List creation could be rewritten by list literal" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects situations when list creation
could be rewritten with list literal.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyCompatibilityInspection" displayName="Code compatibility inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
Enable this inspection if you need your code to be compatible with a range of Python versions (for example, if you&amp;#39;re building a
library).
The range of Python versions with which the code needs to be compatible can be specified in the inspection settings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyAsyncCallInspection" displayName="Coroutine is not awaited" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights coroutines which were called without await
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyGlobalUndefinedInspection" displayName="Global variable is undefined at the module level" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection is used when a variable is defined through the &amp;quot;global&amp;quot; statement but the variable is not defined in the module
scope.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyNamedTupleInspection" displayName="Namedtuple definition" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects invalid definition of namedtuple.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyInitNewSignatureInspection" displayName="Incompatible signatures of __new__ and __init__" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks mutual compatibility of &lt;code&gt;__new__&lt;/code&gt; and &lt;code&gt;__init__&lt;/code&gt; signatures.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyMethodMayBeStaticInspection" displayName="Method may be static" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects any methods which may safely be made static.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyChainedComparisonsInspection" displayName="Chained comparisons can be simplified" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights chained comparisons that can be simplified.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyIncorrectDocstringInspection" displayName="Incorrect docstring" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects mismatched parameters in a docstring.
Please note that it doesn&amp;#39;t warn you of missing parameters, if none of them is mentioned in a docstring.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyStubPackagesAdvertiser" displayName="Stub packages advertiser" enabled="true">&lt;html&gt;
&lt;body&gt;
Advertises stub packages.
&lt;p&gt;
Stub package is a package that contains type information for the corresponding runtime package.
See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0561/&quot;&gt;PEP 561&lt;/a&gt; for more details.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyUnboundLocalVariableInspection" displayName="Unbound local variable" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about local variables referenced before assignment.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyOverloadsInspection" displayName="Overloads in regular Python files" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection validates overloads in regular Python files.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyMethodOverridingInspection" displayName="Method signature does not match signature of overridden method" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects inconsistencies in overriding method signatures.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyTrailingSemicolonInspection" displayName="Trailing semicolon in statement" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects trailing semicolons in statements.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyClassicStyleClassInspection" displayName="Classic style class usage" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects classic style classes usage.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyPropertyAccessInspection" displayName="Access to properties" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that properties are accessed correctly:
read-only not set, write-only not read, non-deletable not deleted.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyShadowingNamesInspection" displayName="Shadowing names from outer scopes" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects shadowing names defined in outer scopes.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyUnusedLocalInspection" displayName="Unused local" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights local variables,parameters or local functions unused in scope.
&lt;/body&gt;&lt;/html&gt;
</inspection>
    <inspection shortName="PyUnnecessaryBackslashInspection" displayName="Unnecessary backslash" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights backslashes in places where line continuation is implicit (inside (), [], {}).
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyTypeCheckerInspection" displayName="Type checker" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects type errors in function call expressions.
Due to dynamic dispatch and duck typing, this is possible in a limited but
useful number of cases. Types of function parameters can be specified in
docstrings or in Python 3 function annotations.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyAbstractClassInspection" displayName="Class must implement all abstract methods" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects when not all abstract properties/methods are defined in a subclass
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyPep8NamingInspection" displayName="PEP 8 naming convention violation" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks the PEP8 naming conventions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyBroadExceptionInspection" displayName="Too broad exception clauses" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights too broad exception clauses such as
no exception class specified, or specified as &amp;#39;Exception&amp;#39;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyStringFormatInspection" displayName="Errors in string formatting operations" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects errors in string formatting operations.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyDictCreationInspection" displayName="Dictionary creation could be rewritten by dictionary literal" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects situations when dictionary creation
could be rewritten with dictionary literal.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyComparisonWithNoneInspection" displayName="Comparison with None performed with equality operators" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights comparisons with None. That type of comparisons
should always be done with &amp;#39;is&amp;#39; or &amp;#39;is not&amp;#39;, never the equality operators.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyByteLiteralInspection" displayName="Byte literal contains characters &gt; 255" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects characters &amp;gt; 255 in byte literals.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyProtocolInspection" displayName="Protocol definition and usages" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects invalid definitions and usages of protocols introduced in PEP-544.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyDictDuplicateKeysInspection" displayName="Dictionary contains duplicate keys" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights using the same value as dictionary key twice.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PySetFunctionToLiteralInspection" displayName="Function call can be replaced with set literal" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects call for function &amp;quot;set&amp;quot; which can be replaced with
set literal.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyPep8Inspection" displayName="PEP 8 coding style violation" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection runs the pep8.py tool to check for violations of the PEP 8 coding style guide.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyClassHasNoInitInspection" displayName="Class has no __init__ method" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection used when a class has no __init__ method, neither its parent classes.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyProtectedMemberInspection" displayName="Access to a protected member of a class or a module" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns if a protected member is accessed outside the class, a descendant of the class where it&amp;#39;s defined or a module.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyMissingOrEmptyDocstringInspection" displayName="Missing or empty docstring" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects lack of docstring and an empty docstring.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyExceptionInheritInspection" displayName="Exception doesn&apos;t inherit from standard &apos;&apos;Exception&apos;&apos; class" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects when a custom exception class is raised but doesn&amp;#39;t inherit from the builtin &amp;quot;Exception&amp;quot; class.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyExceptClausesOrderInspection" displayName="Bad except clauses order" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights situations when except clauses are not in the correct order
(from the more specific to the more generic) or one exception class is caught twice. &lt;br/&gt;
If you don&apos;t fix the order, some exceptions may not be catched by the most specific handler.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyInterpreterInspection" displayName="Invalid interpreter configured" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection notifies you if the current project has no Python interpreter configured or an invalid Python interpreter.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyMissingConstructorInspection" displayName="Missed call to __init__ of super class" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns if call to super constructor in class is missed
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyDocstringTypesInspection" displayName="Type in docstring doesn&apos;t match inferred type" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights types in docstring which don&apos;t match dynamically inferred types.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyRedundantParenthesesInspection" displayName="Redundant parentheses" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights redundant parentheses in statements.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyShadowingBuiltinsInspection" displayName="Shadowing built-ins" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects shadowing built-in names, such as &apos;len&apos; or &apos;list&apos;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyNestedDecoratorsInspection" displayName="Problematic nesting of decorators" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection looks for certain decorators that don&amp;#39;t nest well.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PySingleQuotedDocstringInspection" displayName="Single quoted docstring" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights docstrings not using triple double-quoted string format.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyTupleItemAssignmentInspection" displayName="Tuple item assignment" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects assignments to tuple item.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyRedeclarationInspection" displayName="Redeclared names without usage" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects unconditional redeclarations of names without being used in between, like this: &lt;br/&gt;
 &lt;pre&gt;def x(): pass
x = 2
&lt;/pre&gt;
It applies to function and class declarations, and top-level assignments. &lt;br/&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CommandLineInspection" displayName="Command-line inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
&lt;strong&gt;Command line (commands, arguments and options) inspection.&lt;/strong&gt;
&lt;p&gt;This inspection checks command you type in command console or command file. It helps you to make sure arguments are on their
  places, option names are correct as well as arguments, provided for options.&lt;/p&gt;
&lt;p&gt;Do not disable it if you are going to use command-line interfaces like manage.py in Django&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyOldStyleClassesInspection" displayName="Old-style class contains new-style class features" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights occurrences of new-style class features in old-style classes.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyCallByClassInspection" displayName="Calling a method by class using an instance of a different class" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks for calls of a method by class while passing an instance of a different class
as &lt;code&gt;self&lt;/code&gt; parameter:
&lt;pre&gt;
  foo = Foo()
  Bar.baz(foo, *more)
&lt;/pre&gt;
Sometimes this may be intentional and correct.
But when unintentional, this leads to subtle bugs.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyAttributeOutsideInitInspection" displayName="Instance attribute defined outside __init__" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects instance attribute definition outside __init__ method
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyTestParametrizedInspection" displayName="Checks that functions decorated by pytest parametrize have correct arguments" enabled="true">&lt;html&gt;
&lt;body&gt;
Test function, decorated with @pytest.mark.parametrize, must have arguments to accept parameters from decorator
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PyStringExceptionInspection" displayName="Raising a string exception" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects when a string exception is raised.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyDeprecationInspection" displayName="Deprecated function, class or module" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights usages of Python functions, classes or methods which are marked as deprecated (which raise a
DeprecationWarning or a PendingDeprecationWarning).
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyCallingNonCallableInspection" displayName="Trying to call a non-callable object" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights attempts to call objects which are not callable, like, for example, tuples.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyTypeHintsInspection" displayName="Type hints definitions and usages" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects invalid usages of type hints.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PyMissingTypeHintsInspection" displayName="Missing type hinting for function definition" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects lack of type hints for function declaration in
one of the two formats: parameter annotations or a type comment
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="DOM issues">
    <inspection shortName="DocumentWriteJS" displayName="Call to &apos;document.write()&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports JavaScript method calls to
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.write()&lt;/font&gt;&lt;/b&gt; or
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.writeln()&lt;/font&gt;&lt;/b&gt;.
                Most uses of these calls are better performed using explicit
                DOM calls such as &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;getElementByID()&lt;/font&gt;&lt;/b&gt; and
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;createElement()&lt;/font&gt;&lt;/b&gt;.  Additionally,
                the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;write()&lt;/font&gt;&lt;/b&gt; and
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;writeln()&lt;/font&gt;&lt;/b&gt; calls will not work with XML
                DOMs, including DOMs for XHTML if viewed as XML.  This can result in difficulty to point out bugs.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="InnerHTMLJS" displayName="Use of &apos;innerHTML&apos; property" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports JavaScript accesses to DOM nodes as text using the
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;innerHTML&lt;/font&gt;&lt;/b&gt; property.
                Most uses of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;innerHTML&lt;/font&gt;&lt;/b&gt; are better performed using explicit
                DOM calls such as &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;getElementByID()&lt;/font&gt;&lt;/b&gt; and
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;createElement()&lt;/font&gt;&lt;/b&gt;.  Additionally,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;innerHTML&lt;/font&gt;&lt;/b&gt; will not work with XML
                DOMs, including DOMs for XHTML if viewed as XML.  This can lead to difficult to
                diagnose bugs.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PlatformDetectionJS" displayName="Platform detection" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports common JavaScript patterns for detecting
                the browser or operating system in which script is being run.  In addition
                to pointing out non-portable constructs, these platform detection patterns
                are often incomplete and easily fooled.  For most cases, detection of individual
                environment features is preferable to attempting to detect the entire platform.
                Patterns detected include
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.all&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.layers&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;navigator.userAgent&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;navigator.oscpu&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;navigator.appName&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;navigator.appCodeName&lt;/font&gt;&lt;/b&gt;, and
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;navigator.platform&lt;/font&gt;&lt;/b&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="XHTMLIncompatabilitiesJS" displayName="XHTML incompatibilities" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports common JavaScript DOM patterns which may present problems
                with XHTML documents. In particular, the patterns detected will behave completely
                differently depending on whether the document is loaded as XML or HTML.
                This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content.
                Patterns detected include
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.body&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.images&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.applets&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.links&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.forms&lt;/font&gt;&lt;/b&gt;, and
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;document.anchors&lt;/font&gt;&lt;/b&gt;.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Ini Files">
    <inspection shortName="DuplicateKeyInSection" displayName="Duplicate Directive In Section" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks equal properties in same section.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicateSectionInFile" displayName="Duplicate Section In File" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks equal section names in same ini file.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="RegExp">
    <inspection shortName="RegExpEmptyAlternationBranch" displayName="Empty branch in alternation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports empty branches in a RegExp alternation. For example:&lt;br&gt; &lt;code&gt;a&lt;b&gt;||&lt;/b&gt;b&lt;/code&gt;
&lt;p&gt;An empty branch will only match the empty string, and in most cases that is not what is desired.
This inspection will not report a single empty branch at the start or the end of an alternation.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpAnonymousGroup" displayName="Anonymous capturing group or numeric back reference" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports anonymous capturing groups and numeric back references in a RegExp.
These are only reported when the RegExp dialect supports named group and named group references.
Named groups and named back references improve code readability and are recommended to use instead.
When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,
i.e. &lt;b&gt;(?:xxx)&lt;/b&gt; instead of &lt;b&gt;(xxx)&lt;/b&gt;.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.2&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpDuplicateAlternationBranch" displayName="Duplicate branch in alternation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports duplicate branches in a RegExp alternation. For example &lt;code&gt;(a|b|a)&lt;/code&gt;.
Duplicate branches slow down matching and obscure the intent of the expression.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpUnexpectedAnchor" displayName="Begin or end anchor in unexpected position" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;^&lt;/code&gt; or &lt;code&gt;\A&lt;/code&gt; anchors not at the beginning of the pattern and
&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;\Z&lt;/code&gt; or &lt;code&gt;\z&lt;/code&gt; anchors not at the end of the pattern.
In the wrong position these RegExp anchors prevent the pattern from matching anything.
In case of the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; anchors, most likely the literal character was meant and the escape forgotten.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2018.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpRepeatedSpace" displayName="Consecutive spaces" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports multiple consecutive spaces in a RegExp.
Because spaces are not visible by default, it can be hard to see how many spaces are required.
The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpRedundantEscape" displayName="Redundant character escape" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports character escapes that are replaceable with the unescaped character without a change in meaning.
Note that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.
For example the regex &lt;b&gt;&lt;code&gt;[\.]&lt;/code&gt;&lt;/b&gt; is identical to &lt;b&gt;&lt;code&gt;[.]&lt;/code&gt;&lt;/b&gt;
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.3&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpSingleCharAlternation" displayName="Single character alternation" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports single char alternation (&lt;b&gt;&lt;code&gt;a|b|c|d&lt;/code&gt;&lt;/b&gt;) in a RegExp.
It is simpler and significantly faster to use a character class (&lt;b&gt;&lt;code&gt;[abcd]&lt;/code&gt;&lt;/b&gt;) instead.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpOctalEscape" displayName="Octal escape" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports octal escapes, which are easily confused with back references.
Use hexadecimal escapes to avoid confusion.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RegExpEscapedMetaCharacter" displayName="Escaped meta character" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports the escaped meta characters, e.g. &lt;b&gt;&lt;code&gt;\.&lt;/code&gt;&lt;/b&gt;.
Some RegExp coding styles specify that meta characters should be placed inside a character class,
to make the regular expression easier to understand.
For example the regex &lt;b&gt;&lt;code&gt;\d+\.\d+&lt;/code&gt;&lt;/b&gt; would be written as &lt;code&gt;\d+[.]\d+&lt;/code&gt;.
This inspection does not warn about the meta character &lt;b&gt;&lt;code&gt;[&lt;/code&gt;&lt;/b&gt;, &lt;b&gt;&lt;code&gt;]&lt;/code&gt;&lt;/b&gt; and &lt;b&gt;&lt;code&gt;^&lt;/code&gt;&lt;/b&gt;,
because those would need additional escaping inside a character class.
&lt;!-- tooltip end --&gt;
&lt;p&gt;&lt;small&gt;New in 2017.1&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="JavaScript validity issues">
    <inspection shortName="FunctionWithInconsistentReturnsJS" displayName="Function with inconsistent returns" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript functions which return a value in
                some circumstances and return without a value in others. While legal,
                such code almost certainly represents a programming error

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReservedWordUsedAsNameJS" displayName="Reserved word used as name" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports on any uses of JavaScript reserved words being used as a name.  The JavaScript specification
reserves a number of words which are currently not used as JavaScript keywords.  Using those words as identifiers may
result in broken code if later versions of JavaScript use them as keywords.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BadExpressionStatementJS" displayName="Expression statement which is not assignment or call" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports expression statements which are not assignments or calls.
                Such statements have no dubious semantics, are normally the result of programmer
                error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StringLiteralBreaksHTMLJS" displayName="String literal which breaks HTML parsing" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any instances of JavaScript string literals which contain the sequence &apos;&amp;lt;/&apos;.  Such strings
                are legal JavaScript, but may result in incorrect parsing of any HTML the JavaScript is embedded in.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSReferencingArgumentsOutsideOfFunction" displayName="Referencing &apos;arguments&apos; outside of function" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that &apos;arguments&apos; are referenced only in function body.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DuplicateCaseLabelJS" displayName="Duplicate case label" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any duplicated
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;case&lt;/font&gt;&lt;/b&gt; labels on JavaScript
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements.
                Such &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements are normally
                an indication of programmer error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnreachableCodeJS" displayName="Unreachable code" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript code which can never be executed.
                Such code almost certainly represents a programming error

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DebuggerStatementJS" displayName="&apos;debugger&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports JavaScript &apos;debugger&apos; statements, used for interaction
                with Javascript debuggers.  Such statements should probably not be found in production code.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThisExpressionReferencesGlobalObjectJS" displayName="&apos;this&apos; expression which references the global object" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports instances of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;this&lt;/font&gt;&lt;/b&gt;
                expression occuring outside of object literals or constructor bodies.  Such &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;this&lt;/font&gt;&lt;/b&gt;
                expressions are legal JavaScript, and reference the top-level &quot;global&quot; JavaScript object,
                but are largely useless.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Node.js">
    <inspection shortName="NodeModulesDependencies" displayName="Missing require() statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that all modules are referenced through &quot;require()&quot;.
&lt;p&gt;Suggests inserting the &quot;require()&quot; call.&lt;/p&gt;
&lt;p&gt;Works only in files in the scope of &quot;Node.js Core&quot; JavaScript library.&lt;/p&gt;
&lt;p&gt;When using libraries that define their own global symbols outside their visible JavaScript code (e.g. &lt;code&gt;describe()&lt;/code&gt;
  in &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;),&lt;br/&gt;
  it is recommended that you &lt;a href=&quot;https://www.jetbrains.com/webstorm/help/configuring-javascript-libraries.html#d24640e316&quot;&gt;add&lt;/a&gt;
  the corresponding TypeScript type definition file as a JavaScript library in &lt;em&gt;Preferences | Languages &amp; Frameworks | JavaScript | Libraries&lt;/em&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="SQL">
    <inspection shortName="SqlWithoutWhereInspection" displayName="Delete or update statement without where clauses" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports usages of &apos;delete&apos; or &apos;update&apos; statements without any &apos;where&apos; clauses.
When used without &apos;where&apos; clauses, &apos;delete&apos; drops all the data from the table, and &apos;update&apos; overwrites values for all table rows.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SqlDeprecateTypeInspection" displayName="Deprecated type" enabled="true">&lt;html&gt;
&lt;body&gt;
  Since 8.0 the &apos;long&apos; type is deprecated and not recommended to use (because API for this type doesn&apos;t utilize character streams but transfer whole values each time).
  In Oracle, do not create a table with LONG columns. Use LOB columns (CLOB, NCLOB, BLOB) instead. LONG columns are supported only for backward compatibility.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlUnreachableCodeInspection" displayName="Unreachable code" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection reports unreachable statements inside SQL routines.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlNullComparisonInspection" displayName="Null comparison" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks suspicious comparisons with NULL.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlAmbiguousColumnInspection" displayName="Ambiguous reference" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection checks that column reference resolves to a single column.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlInsertValuesInspection" displayName="VALUES clause cardinality" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection checks that the number of VALUES (...) parameters matches target table column list size.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlUnusedSubqueryItemInspection" displayName="Unused subquery item" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection reports unused subquery items: columns and aliases that are not referenced in the outer query expression
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlJoinWithoutOnInspection" displayName="Unsafe &apos;join&apos; clause in &apos;delete&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports usages of &apos;join&apos; clause inside a &apos;delete&apos; statement where no &apos;on&apos; or &apos;where&apos; checks are present.
Without conditional checks on &apos;join&apos;, &apos;delete&apos; drops contents of the entire table.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SqlAddNotNullColumnInspection" displayName="Adding not null column without default value" enabled="true">&lt;html&gt;
&lt;body&gt;

Necessary to specify the default value for the new column with not null constraint.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlDropIndexedColumnInspection" displayName="Index is dependent on column" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection checks dropping indexed columns in MS SQL and Sybase SQL Server.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SqlConstantConditionInspection" displayName="Constant condition" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports those conditions in the where or join clauses that are always
&lt;strong&gt;true&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SqlDerivedTableAliasInspection" displayName="Each derived table should have alias" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection checks that each derived table should have own alias.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlDialectInspection" displayName="SQL dialect detection" enabled="true">&lt;html&gt;
&lt;body&gt;
Detects the best matching SQL dialect for files in &lt;b&gt;&amp;lt;Generic&amp;gt;&lt;/b&gt; dialect.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlSideEffectsInspection" displayName="Statement with side effects" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection only runs during a read-only connection and
reports statements that may lead to modification of the database.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MysqlParsingInspection" displayName="MySQL: Syntax" enabled="true">&lt;html&gt;
&lt;body&gt;
Provides diagnostic of MySQL parser idiosyncrasies.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PgSelectFromProcedureInspection" displayName="Postgres: Select from procedure call" enabled="true">&lt;html&gt;
&lt;body&gt;

Select from &lt;strong&gt;dblink&lt;/strong&gt; or function that returns record require typed alias list.
Scalar functions do not require alias and forbid typed alias lists completely.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlCheckUsingColumnsInspection" displayName="Check using clause columns" enabled="true">&lt;html&gt;
&lt;body&gt;
  This inspection checks that columns inside using clause exist in both tables.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlShouldBeInGroupByInspection" displayName="Column should be in group by clause" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection checks that column should be in group by clause or inside aggregate function call.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlAutoIncrementDuplicateInspection" displayName="Auto-increment duplicate" enabled="true">&lt;html&gt;
&lt;body&gt;
  This inspection checks &lt;strong&gt;auto_increment&lt;/strong&gt; duplicates in MySQL, MS SQL and Db2 dialects.
  A table in those dialects can contain only one auto-incrementing field.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SqlResolveInspection" displayName="Unresolved reference" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection performs unresolved SQL references check.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlNoDataSourceInspection" displayName="No data sources configured" enabled="true">&lt;html&gt;
&lt;body&gt;
Prompts one to create a data source if there is none.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlStorageInspection" displayName="SQL source modification detection" enabled="true">&lt;html&gt;
&lt;body&gt;
Detects that database sources have changed.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlIdentifierInspection" displayName="Identifier should be quoted" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection performs SQL identifier names check.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlTypeInspection" displayName="Types compatibility" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection performs type-related check.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlUnusedVariableInspection" displayName="Unused variable" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection performs unused argument/variable check.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlErrorHandlingInspection" displayName="SQL error handling" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights invalid usages of constructs that handle exceptions in SQL routines
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SqlSignatureInspection" displayName="Function signature" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection performs function signature check.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Properties Files">
    <inspection shortName="IncompleteProperty" displayName="Property is incomplete" enabled="true"/>
    <inspection shortName="DuplicatePropertyInspection" displayName="Duplicate Property" enabled="false"/>
    <inspection shortName="AlphaUnsortedPropertiesFile" displayName="Properties File or Resource Bundle is Alphabetically Unsorted" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports on alphabetically unsorted resource bundles or properties files.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WrongPropertyKeyValueDelimiter" displayName="Property key/value delimiter doesn&apos;t match code style settings" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports on properties in which key/value delimiter doesn&apos;t match code style settings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedProperty" displayName="Unused Property" enabled="true"/>
    <inspection shortName="TrailingSpacesInProperty" displayName="Trailing Spaces in Property" enabled="true"/>
  </group>
  <group name="Control flow issues">
    <inspection shortName="JSObjectNullOrUndefined" displayName="Object is &apos;null&apos; or &apos;undefined&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection reports errors caused by invoking a method, 
accessing a property or calling a function on an object that is `undefined` or `null`
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfStatementWithIdenticalBranchesJS" displayName="&apos;if&apos; statement with identical branches" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;
                statements with identical &quot;then&quot; and &quot;else&quot; branches in JavaScript content. Such statements are almost
                certainly programmer error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BreakStatementWithLabelJS" displayName="&apos;break&apos; statement with label" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any labelled &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;break&lt;/font&gt;&lt;/b&gt; statements in Javascript content.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DuplicateConditionJS" displayName="Duplicate condition in &apos;if&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports on any duplicate conditions among different branches of an
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statement in JavaScript content. While it may rarely be the
                desired semantics, duplicate conditions usually represent programmer oversight.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="LoopStatementThatDoesntLoopJS" displayName="Loop statement that doesn&apos;t loop" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instance of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;do&lt;/font&gt;&lt;/b&gt; statements
                in JavaScript content whose bodies are guaranteed to execute at most once. Normally, this is
                an indication of a bug. Powered by InspectionJS
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ContinueStatementJS" displayName="&apos;continue&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;continue&lt;/font&gt;&lt;/b&gt; statements in Javascript content.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryContinueJS" displayName="Unnecessary &apos;continue&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;

              Reports on any unnecessary &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;continue&lt;/font&gt;&lt;/b&gt; statements at the end of loops, in JavaScript content. These statements may be safely removed.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SwitchStatementWithNoDefaultBranchJS" displayName="&apos;switch&apos; statement with no default branch" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements in Javascript content which
                lack &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;default&lt;/font&gt;&lt;/b&gt; branches.  Such statements
                may result in difficult bugs, if unexpected cases are silently ignored

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="TailRecursionJS" displayName="Tail recursion" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports any instances of tail recursion, that is when a JavaScript function calls itself
as its last action before returning.  Tail recursion can always be replaced by looping, which will be considerably faster.
Some JavaScript engines perform this optimization, while others do not.  Thus, tail recursive solutions may have considerably different
performance characteristics on different environments.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="TrivialConditionalJS" displayName="Redundant conditional expression" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript conditional expressions of the form
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&lt;i&gt;condition&lt;/i&gt;?true:false&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;
                &lt;i&gt;condition&lt;/i&gt;?false:true&lt;/font&gt;&lt;/b&gt;. These expressions may be safely simplified
                to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&lt;i&gt;condition&lt;/i&gt;&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!&lt;i&gt;condition&lt;/i&gt;
            &lt;/font&gt;&lt;/b&gt;, respectively.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SuspiciousTypeOfGuard" displayName="Unsound type guard check" enabled="true">&lt;html&gt;
&lt;body&gt;
&apos;typeof x&apos; type guard can be unsound in one of the following two cases:
&lt;ol&gt;
&lt;li&gt;typeof x never corresponds to the specified value (e.g., typeof x === &apos;number&apos; when &apos;x&apos; is &apos;string | boolean&apos;)&lt;/li&gt;
&lt;li&gt;typeof x always corresponds to the specified value (e.g., typeof x === &apos;string&apos; when &apos;x&apos; is &apos;string&apos;)&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
&apos;x instanceof A&apos; type guard can be unsound in one of the following two cases:
&lt;ol&gt;
  &lt;li&gt;Type of x is not related to &apos;A&apos;&lt;/li&gt;
  &lt;li&gt;Type of x is &apos;A&apos; or a subtype of &apos;A&apos;&lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedSwitchStatementJS" displayName="Nested &apos;switch&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements in Javascript content which
                are nested in other &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements.  Such nested switch statements can be
                very confusing, particularly if proper indenting is not followed.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConstantIfStatementJS" displayName="Constant &apos;if&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any instances of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statements of the form
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if(true)...&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if(false)...&lt;/font&gt;&lt;/b&gt;.
These statements sometimes occur due to automatic refactorings, and may obviously
be simplified.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ContinueStatementWithLabelJS" displayName="&apos;continue&apos; statement with label" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any labelled &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;continue&lt;/font&gt;&lt;/b&gt; statements in Javascript content.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PointlessBooleanExpressionJS" displayName="Pointless boolean expression" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of pointless or pointlessly
                complicated boolean expressions in JavaScript content. Such expressions include anding with true, oring with false,
                equality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be
                the result of automated refactorings
                not completely followed through to completion, and in any case are unlikely to be what the developer
                intended to do.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="LabeledStatementJS" displayName="Labeled statement" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any labeled statements in Javascript content.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConditionalExpressionWithIdenticalBranchesJS" displayName="Conditional expression with identical branches" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of ternary conditional
                expressions with identical &quot;then&quot; and &quot;else&quot; branches in JavaScript content.
                Such statements are almost certainly programmer error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="TrivialIfJS" displayName="Redundant &apos;if&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;
				Reports instances of JavaScript &lt;b&gt;&lt;font
					color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statements which
				can be simplified to single assignment or
				&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements. For example:
&lt;pre&gt;
	&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;(foo())
	{
		&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; true;
	}
	&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;else&lt;/font&gt;&lt;/b&gt;
	{
		&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; false;
	}
&lt;/pre&gt;
				can be simplified to
&lt;pre&gt;
	&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; foo();
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryReturnJS" displayName="Unnecessary &apos;return&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports on any unnecessary &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements
                in JavaScript functions.  Unnecessary &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements are those which
                return no value and occur just before the function would have &quot;fallen through&quot; to the bottom.
                These statements may be safely removed.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryLabelOnContinueStatementJS" displayName="Unnecessary label on &apos;continue&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any labelled &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;continue&lt;/font&gt;&lt;/b&gt; statements 
                in Javascript content whose labels may be removed without changing the flow of control.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConstantConditionalExpressionJS" displayName="Constant conditional expression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports any instances of conditional expressions of the form
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/font&gt;&lt;/b&gt;.
These expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FallThroughInSwitchStatementJS" displayName="Fallthrough in &apos;switch&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any cases where control can proceed from one branch of a
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statement to the next, in Javascript content.  Such &quot;fall-through&quot; is often
                a result of programmer error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryLabelOnBreakStatementJS" displayName="Unnecessary label on &apos;break&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any labelled &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;break&lt;/font&gt;&lt;/b&gt; statements 
                in Javascript content whose labels may be removed without changing the flow of control.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryLabelJS" displayName="Unnecessary label" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of unused labels in JavaScript code.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IfStatementWithTooManyBranchesJS" displayName="&apos;if&apos; statement with too many branches" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statements with too many
                branches in Javascript content. Such statements may be confusing, and are
                often the sign of inadequate levels of design abstraction.
                &lt;p&gt;
                    Use the field below to specify the maximum number of branches expected.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DefaultNotLastCaseInSwitchJS" displayName="&apos;default&apos; not last case in &apos;switch&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any instances of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements where the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;default&lt;/font&gt;&lt;/b&gt; case
comes before some other case.  This construct is unnecessarily confusing.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BreakStatementJS" displayName="&apos;break&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;break&lt;/font&gt;&lt;/b&gt; statements in Javascript content.
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;break&lt;/font&gt;&lt;/b&gt; statements that end case blocks are not reported.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ForLoopReplaceableByWhileJS" displayName="&apos;for&apos; loop may be replaced by &apos;while&apos; loop" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any instances of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt; loops
which contain neither initialization or update components, and can thus be replaced by
simpler &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt; statements.
&lt;p&gt;Use the checkbox below if you wish this inspection to ignore &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt; loops with trivial or non-existent conditions.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="JSON and JSON5">
    <inspection shortName="JsonSchemaCompliance" displayName="Compliance with JSON schema" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that JSON files conform to JSON Schemas assigned to them&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JsonDuplicatePropertyKeys" displayName="Duplicate keys in object literals" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that object literals don&apos;t contain duplicate keys.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Json5StandardCompliance" displayName="Compliance with JSON5 standard" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that JSON5 files conform to language specification (http://json5.org/).&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JsonStandardCompliance" displayName="Compliance with JSON standard" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that JSON files conform to language specification (RFC-7159).&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JsonSchemaRefReference" displayName="Unresolved &apos;$ref&apos; and &apos;$schema&apos; references" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that &apos;$ref&apos; and &apos;$schema&apos; paths are valid&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Sass/SCSS">
    <inspection shortName="SassScssResolvedByNameOnly" displayName="Resolved by name only" enabled="true">This inspection warns about SASS/SCSS elements that are not imported explicitly and resolved through all project SASS or SCSS files only by name.
    You have no guaranties that these elements will be resolved at the production.

</inspection>
    <inspection shortName="SassScssUnresolvedVariable" displayName="Unresolved variable" enabled="true">This inspection warns about sass/scss variable references which can&apos;t be resolved to any valid target.
</inspection>
    <inspection shortName="SassScssUnresolvedMixin" displayName="Unresolved mixin" enabled="true">This inspection warns about sass/scss mixins references which can&apos;t be resolved to any valid target.
</inspection>
    <inspection shortName="SassScssUnresolvedPlaceholderSelector" displayName="Unresolved placeholder selector" enabled="true">This inspection warns about sass/scss placeholder selector references which can&apos;t be resolved to any valid target.
</inspection>
  </group>
  <group name="General">
    <inspection shortName="PackageJsonMismatchedDependency" displayName="Mismatched dependencies in package.json" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports dependencies in package.json that are not installed or don&apos;t match the specified &lt;a href=&quot;https://docs.npmjs.com/misc/semver&quot;&gt;version range&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantSuppression" displayName="Redundant suppression" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports usages of
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@SuppressWarning&lt;/code&gt; annotation, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;// noinspection&lt;/code&gt; line comment, or&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/** noinspection */&lt;/code&gt; JavaDoc comment&lt;/li&gt;
&lt;/ul&gt;

which can be safely removed because inspection they affect is no longer applicable in this context.
&lt;p&gt;
  For example:
  &lt;code&gt;&lt;pre&gt;
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;public class&lt;/font&gt;&lt;/b&gt; C {
 // symbol is already private,
 // but annotation is still around
  @SuppressWarnings({&quot;WeakerAccess&quot;})
 &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;private boolean&lt;/font&gt;&lt;/b&gt; CONST = &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true&lt;/font&gt;&lt;/b&gt;;
 &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; f() {
    CONST = &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false&lt;/font&gt;&lt;/b&gt;;
  }
}
&lt;/pre&gt;
  &lt;/code&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSDuplicatedDeclaration" displayName="Duplicate JavaScript declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks JavaScript &lt;b&gt;declaration&lt;/b&gt; to be declared once in &lt;b&gt;current&lt;/b&gt; scope.
The validation works in JavaScript, html, or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSPotentiallyInvalidConstructorUsage" displayName="Potentially invalid constructor usage" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports JavaScript potentially invalid &lt;b&gt;constructor function usages&lt;/b&gt; such as: using non constructor in new, using
constructor&apos;s prototype, report
constructor call without new. Constructor function assumed to have upper case name (optional) or have explicit JSDoc @constructor tag.
The validation works in JavaScript, html or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AmdModulesDependencies" displayName="Missing AMD module dependency" enabled="true">&lt;html&gt;
&lt;body&gt;
Inside an AMD module definition, checks that all used modules are specified as dependencies.
&lt;p&gt;Suggests inserting the module dependency.&lt;/p&gt;
&lt;p&gt;Works only in files in the scope of &quot;HTML&quot; JavaScript library.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WebpackConfigHighlighting" displayName="Validate webpack configuration" enabled="true">&lt;html&gt;
&lt;body&gt;
Validates options in the webpack configuration file (which name should start with `webpack`, e.g. `webpack.config.js`)
against &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json&quot;&gt;webpack Options Schema&lt;/a&gt;.
&lt;br/&gt;&lt;br/&gt;
Disable this inspection to turn off validation and code completions inside the configuration object.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSPotentiallyInvalidUsageOfClassThis" displayName="Potentially invalid reference to &apos;this&apos; of a class from closure" enabled="true">&lt;html&gt;
&lt;body&gt;
Warns against a common mistake of trying to reference a member of an ECMAScript class via &lt;b&gt;this.&lt;/b&gt; qualifier in a nested function that is not a lambda.&lt;br/&gt;
&lt;b&gt;this&lt;/b&gt; in a nested function that is not a lambda is the function&apos;s own &apos;this&apos; and doesn&apos;t relate to the outer class.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSFileReferences" displayName="Validate file references" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports unresolved file references in JavaScript files, including CommonJS and AMD modules references.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6PossiblyAsyncFunction" displayName="Possibly async function" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights usages of &lt;b&gt;await&lt;/b&gt; in functions that were possibly intended to be async but are missing the &lt;b&gt;async&lt;/b&gt; modifier.
&lt;!-- tooltip end --&gt;
While it is possible to use &apos;await&apos; as an identifier, it is likely that it was intended to be used as an operator 
and the containing function should be made async. 
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InconsistentLineSeparators" displayName="Inconsistent line separators" enabled="false">&lt;html&gt;
&lt;body&gt;
  This inspection detects files with line separators different from the project default.
  E.g. you set the line separator to &quot;\n&quot; in the Settings|Code Style|Line separator,
  and the file you are editing uses &apos;\r\n&apos; as a line separator.

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NpmUsedModulesInstalled" displayName="Missing module dependency" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks whether the module in the &quot;require()&quot; call or import statement exists, whether it is listed in package.json dependencies, and whether it is locally installed.
&lt;p&gt;Suggests installing the module and/or including it into package.json.&lt;/p&gt;
&lt;p&gt;For require() calls, works only in files in the scope of &quot;Node.js Core&quot; JavaScript library.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSAnnotator" displayName="JavaScript general errors" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection is for ability to suppress irrelevant JavaScript errors like assignment to const, continue without loop, e.t.c.
&lt;br&gt;
Generally, this is not required, but there may be cases when such errors are unexpectedly reported due to dynamic nature of JavaScript
or bugs in IDE&apos;s annotator implementation.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSSuspiciousNameCombination" displayName="Suspicious name combination" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports assignments and function calls where the name of the variable to which
a value is assigned or the function parameter does not seem to match the name of the value assigned to it.
For example:
&lt;pre&gt;&lt;code&gt;&lt;font color=&quot;#000080&quot;&gt;
  &lt;b&gt;var&lt;/b&gt; x = 0;
  &lt;b&gt;var&lt;/b&gt; y = x;&lt;/font&gt;&lt;/code&gt;&lt;/pre&gt; or &lt;pre&gt;&lt;code&gt;&lt;font color=&quot;#000080&quot;&gt;
  &lt;b&gt;var&lt;/b&gt; x = 0, y = 0;
  &lt;b&gt;var&lt;/b&gt; rc = &lt;b&gt;new&lt;/b&gt; Rectangle(y, x, 20, 20);&lt;/font&gt;&lt;/code&gt;&lt;/pre&gt;
The configuration pane allows to specify the names which should not be used together: the error is reported
if the parameter name or assignment target name contains words from one group and the name of the assigned or passed
variable contains words from a different group.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSLastCommaInArrayLiteral" displayName="Unneeded last comma in array literal" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports when a trailing comma is used in array literals in JavaScript code.

&lt;p&gt;The warning is reported only when the JavaScript language version is set to JavaScript 1.8.5, ECMAScript 3 or 5.1.&lt;/p&gt;

&lt;p&gt;Trailing commas in arrays are allowed according to these specifications, however, some browsers might throw an error when a trailing comma is used.&lt;/p&gt;

&lt;p&gt;You can configure formatting options for trailing commas in &lt;b&gt;Code Style&lt;/b&gt; | &lt;b&gt;JavaScript&lt;/b&gt; or &lt;b&gt;TypeScript&lt;/b&gt; | &lt;b&gt;Punctuation&lt;/b&gt;. &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSPotentiallyInvalidUsageOfThis" displayName="Potentially invalid reference to &apos;this&apos; from closure" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for JavaScript &lt;b&gt;this&lt;/b&gt; to be the same in closure and in outer context.
The validation works in JavaScript, html, or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSUnnecessarySemicolon" displayName="Unnecessary semicolon" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks JavaScript source code for unneeded &lt;b&gt;semicolons&lt;/b&gt; .
The validation works in JavaScript, html or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSLastCommaInObjectLiteral" displayName="Unneeded last comma in object literal" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports when a trailing comma is used in object literals in JavaScript code.

&lt;p&gt;The warning is reported only when the JavaScript language version is set to JavaScript 1.8.5, ECMAScript 3 or 5.1.&lt;/p&gt;

&lt;p&gt;Trailing commas in object literals are allowed according to these specifications, however, some browsers might throw an error when a trailing comma is used.&lt;/p&gt;

&lt;p&gt;You can configure formatting options for trailing commas in &lt;b&gt;Code Style&lt;/b&gt; | &lt;b&gt;JavaScript&lt;/b&gt; or &lt;b&gt;TypeScript&lt;/b&gt; | &lt;b&gt;Punctuation&lt;/b&gt;.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSDeprecatedSymbols" displayName="Deprecated JavaScript symbol" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for using deprecated JavaScript &lt;b&gt;functions&lt;/b&gt; and &lt;b&gt;variables&lt;/b&gt; .
The validation works in JavaScript, html, or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSMismatchedCollectionQueryUpdate" displayName="Mismatched query and update of collection" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports collection fields or variables whose contents are either queried and not updated,
or updated and not queried. Such mismatched queries and updates are pointless,
and may indicate either dead code or a typographical error.
&lt;p&gt;
Use the tables below to specify which methods are update and/or query methods.
The names are matched with the beginning of the method name.
Query methods which return their result are automatically detected,
only query methods which return their result in an argument need to be specified.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSUnusedLocalSymbols" displayName="Unused local symbol" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks JavaScript &lt;b&gt;parameter&lt;/b&gt;, local &lt;b&gt;variable&lt;/b&gt;, &lt;b&gt;function&lt;/b&gt;, &lt;b&gt;classes&lt;/b&gt; and private member declarations
to be &lt;b&gt;used&lt;/b&gt; in given file scope.
The validation works in JavaScript, ActionScript, HTML and JSP files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6ClassMemberInitializationOrder" displayName="Use of possibly unassigned property in a static initializer" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports when a class member initializer references another non-hoisted class member that could be not initialized yet.
&lt;br/&gt;&lt;br/&gt;
Class members initialization happens consequently for fields, thus, a field cannot reference another field declared later.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6CheckImport" displayName="Validate imports" enabled="true">&lt;html&gt;
&lt;body&gt;
Validate ES6 imports
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SyntaxError" displayName="Syntax error" enabled="true">&lt;html&gt;
&lt;body&gt;
Allows you to see syntax errors in the results of batch code inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TodoComment" displayName="TODO comment" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;TODO&lt;/b&gt; comments in your code. The Format of
&lt;b&gt;TODO&lt;/b&gt; comments is configurable via the &lt;i&gt;Settings | Editor | TODO&lt;/i&gt; panel. Since
syntax highlighting for &lt;b&gt;TODO&lt;/b&gt; comments is already provided, it is expected that this will largely
be used in batch mode.
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LongLine" displayName="Line is longer than allowed by code style" enabled="false">&lt;html&gt;
&lt;body&gt;
InspectionType warns you of lines which are longer than &lt;b&gt;right margin&lt;/b&gt; parameter in &lt;b&gt;Code Style&lt;/b&gt; settings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSUnusedGlobalSymbols" displayName="Unused global symbol" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks if JavaScript public &lt;b&gt;functions&lt;/b&gt;, &lt;b&gt;variables&lt;/b&gt;, &lt;b&gt;classes&lt;/b&gt;, 
and &lt;b&gt;properties&lt;/b&gt; are &lt;b&gt;used&lt;/b&gt; in global scope.
The validation works in JavaScript, ActionScript, HTML and JSP files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSPotentiallyInvalidTargetOfIndexedPropertyAccess" displayName="Possibly incorrect target of indexed property access" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports JavaScript potentially invalid &lt;b&gt;indexed property access&lt;/b&gt; such as Array[1].
The validation works in JavaScript, html, or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSJQueryEfficiency" displayName="jQuery usage efficiency" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that jQuery selectors are used in an efficient way.
It warns about duplicated selectors which could be cached and optionally about attribute and pseudo-selectors usage.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSUnusedAssignment" displayName="Unused assignment" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks JavaScript for unused assignments.
The validation works in JavaScript, ActionScript, HTML and JSP files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSUndeclaredVariable" displayName="Implicitly declared global JavaScript variable" enabled="true">
&lt;html&gt;
&lt;body&gt;
Checks JavaScript &lt;b&gt;variables&lt;/b&gt; to be declared explicitly with &lt;b&gt;var&lt;/b&gt; statement.
The validation works in JavaScript, html or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CoffeeScriptUnusedLocalSymbols" displayName="Unused local symbols" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks CoffeeScript &lt;b&gt;parameter&lt;/b&gt; , local &lt;b&gt;variable&lt;/b&gt; , &lt;b&gt;function&lt;/b&gt; , &lt;b&gt;classes&lt;/b&gt; and private member declarations to be &lt;b&gt;used&lt;/b&gt;
in given file scope.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSNonStrictModeUsed" displayName="Non-strict mode used" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks that JavaScript files are in strict mode.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CoffeeScriptFunctionSignatures" displayName="Signature mismatch" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks CoffeeScript called function &lt;b&gt;arguments&lt;/b&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSUnresolvedLibraryURL" displayName="There is no locally stored library for the HTTP link." enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that URL of an external JavaScript library is associated with
a locally stored file used for code completion and navigation. &lt;br&gt;
Use &apos;Download library&apos; quick fix (Alt+Enter) to solve the problem.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSRedeclarationOfBlockScope" displayName="Duplicate block scoped declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that JavaScript block scoped declaration (let/const) is not redeclared again.
The validation works in JavaScript, TypeScript, html, or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SSBasedInspection" displayName="Structural Search InspectionType" enabled="false">&lt;html&gt;
&lt;body&gt;
&lt;p&gt;This inspection allows to configure number of &lt;b&gt;Structural Search/Structural Replace&lt;/b&gt; templates to be applied to the file you are editing.
&lt;/p&gt;
&lt;p&gt;All matches are highlighted with the template name you have configured.
If you configured &lt;b&gt;Structural Replace&lt;/b&gt; pattern, corresponding replace would appear as a quick fix.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSValidateTypes" displayName="Type mismatch" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks JavaScript called function &lt;b&gt;parameters&lt;/b&gt; , &lt;b&gt;return values&lt;/b&gt; , &lt;b&gt;assigned expressions&lt;/b&gt; to be of correct type.
The validation works in JavaScript, html or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSXNamespaceValidation" displayName="Missing React import with JSX" enabled="true">&lt;html&gt;
&lt;body&gt;
When using JSX, it&apos;s usually required to have import from React in the file scope. Otherwise, the code may not compile properly.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6ShorthandObjectProperty" displayName="Property can be replaced with shorthand" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights and provides fixes to convert object properties to ES6 shorthand style.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  &lt;code&gt;
    var obj = {foo:foo}
  &lt;/code&gt;
&lt;/p&gt; to
&lt;p&gt;
  &lt;code&gt;
    var obj = {foo}
  &lt;/code&gt;
&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InjectedReferences" displayName="Injected References" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks references injected by IntelliLang plugin.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSUnresolvedVariable" displayName="Unresolved JavaScript variable" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks JavaScript referenced &lt;b&gt;variables&lt;/b&gt; and &lt;b&gt;fields&lt;/b&gt; to be valid ones.
The validation works in JavaScript, html or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSUnfilteredForInLoop" displayName="Unfiltered for..in loop" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for any instances of &lt;b&gt;unfiltered&lt;/b&gt; for-in loops in JavaScript.
The use of this construct results in processing inherited or unexpected properties. You need to filter own properties
with hasOwnProperty() method. The validation works in JavaScript, html or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSCheckFunctionSignatures" displayName="Signature mismatch" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks JavaScript called function &lt;b&gt;arguments&lt;/b&gt; , &lt;b&gt;return values&lt;/b&gt; , &lt;b&gt;assigned expressions&lt;/b&gt; to be of correct type.
The validation works in JavaScript, html or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSMethodCanBeStatic" displayName="Method can be static" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for ActionScript and TypeScript &lt;b&gt;functions&lt;/b&gt; that can be static. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSAccessibilityCheck" displayName="@private and @protected members accessibility" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that JavaScript members marked with &lt;b&gt;@private&lt;/b&gt; and &lt;b&gt;@protected&lt;/b&gt; tags are visible in current context.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSCommentMatchesSignature" displayName="JSDoc comment matches function signature" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that parameters defined within JSDoc comment match function&apos;s actual parameters, i.e. have the same names and quantity. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Annotator" displayName="Annotator" enabled="true">&lt;html&gt;
&lt;body&gt;
Allows you to see problems reported by language annotators in the results of batch code inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSPrimitiveTypeWrapperUsage" displayName="Primitive type object wrapper used" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for improper usage of wrappers for JavaScript primitive types. Also, warning will be produced when property of primitive type is
modified, as assigned value will be lost.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSUnresolvedExtXType" displayName="Unresolved Ext JS xtype" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that Ext JS xtype references have corresponding class.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6MissingAwait" displayName="Missing await for an async function call" enabled="true">&lt;html&gt;
&lt;body&gt;
Missing &lt;b&gt;await&lt;/b&gt; call for an async function can produce unexpected behaviour.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSClosureCompilerSyntax" displayName="Closure compiler syntax" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks code for warnings implied by Google Closure Compiler annotations.
This includes correct usage of @abstract, @interface and @implements tags. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6UnusedImports" displayName="Unused ES6 / TypeScript imports" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that JavaScript or TypeScript import &lt;b&gt;binding&lt;/b&gt; or &lt;b&gt;specifier&lt;/b&gt; is used in a given module scope.
The validation works in ES6 and TypeScript files.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSUnresolvedFunction" displayName="Unresolved JavaScript function" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks JavaScript called &lt;b&gt;functions&lt;/b&gt; to be valid ones.
The validation works in JavaScript, html or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSValidateJSDoc" displayName="Validate JSDoc" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection validates references in JavaScript / ActionScript documentation comments (JSDoc / ASDoc). &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSReferencingMutableVariableFromClosure" displayName="Referencing mutable variable from closure" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for accessing mutable JavaScript &lt;b&gt;variables&lt;/b&gt; in nested &lt;b&gt;functions&lt;/b&gt; .
The validation works in JavaScript, html, or jsp files. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ES6ModulesDependencies" displayName="Missing import statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that all modules are referenced through import statements.
&lt;p&gt;Suggests inserting the import statement.&lt;/p&gt;
&lt;p&gt;When using libraries that define their own global symbols outside their visible JavaScript code (e.g. &lt;code&gt;describe()&lt;/code&gt;
  in &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;),&lt;br/&gt;
  it is recommended that you &lt;a href=&quot;https://www.jetbrains.com/webstorm/help/configuring-javascript-libraries.html#d24640e316&quot;&gt;add&lt;/a&gt;
  the corresponding TypeScript type definition file as a JavaScript library in &lt;em&gt;Preferences | Languages &amp; Frameworks | JavaScript | Libraries&lt;/em&gt;.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProblematicWhitespace" displayName="Problematic whitespace" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports tabs used for indentation when the code style is configured to use only spaces. Reports spaces used for indentation when
the code style is configured to use only tabs. Reports spaces used for indentation and tabs used for alignment when the code
style is configured to use smart tabs.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="ECMAScript 6 migration aids">
    <inspection shortName="ES6ConvertRequireIntoImport" displayName="&apos;require()&apos; is used instead of &apos;import&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports when &lt;code&gt;require()&lt;/code&gt; is used and helps to replace the &lt;code&gt;require()&lt;/code&gt; call with the &lt;code&gt;import&lt;/code&gt; statement.
&lt;br/&gt;&lt;br/&gt;
Enable &lt;i&gt;Convert require() inside inner scopes with Fix all action&lt;/i&gt;
to convert all &lt;code&gt;require()&lt;/code&gt; calls inside the nested functions and statements when using the &lt;i&gt;Fix all&lt;/i&gt; action.
&lt;br/&gt;&lt;br/&gt;
Please note that converting the &lt;code&gt;require()&lt;/code&gt; statements inside inner scopes to the &lt;code&gt;import&lt;/code&gt; statements
may cause changes in the semantics of the code.
Import statements are static module dependencies and are hoisted,
which means that they are moved to the top of the current module. &lt;code&gt;require()&lt;/code&gt; calls load modules dynamically.
They can be executed conditionally and their scope is defined by the expression in which they are used.
&lt;br/&gt;Clear &lt;i&gt;Convert require() inside inner scopes with Fix all action&lt;/i&gt; option to prevent any changes in these complex cases when using Fix all action.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6ConvertToForOf" displayName="&apos;for..in&apos; is used instead of &apos;for..of&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Converts &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in&quot;&gt;for..in&lt;/a&gt;&lt;/code&gt;
loops on arrays to &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for..of&lt;/a&gt;&lt;/code&gt; loops.
&lt;br/&gt;&lt;code&gt;for..of&lt;/code&gt; loops, introduced in ECMAScript 6, iterate over &lt;code&gt;iterable&lt;/code&gt; objects.
For arrays, this construction should be preferred to &lt;code&gt;for..in&lt;/code&gt;, since it is executed only for array values and not for array object&apos;s properties.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6ConvertModuleExportToExport" displayName="&apos;module.exports&apos; is used instead of &apos;export&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports when &lt;code&gt;module.export&lt;/code&gt; is used and helps to replace it with the &lt;code&gt;export&lt;/code&gt; or &lt;code&gt;export default&lt;/code&gt; statement.
&lt;br/&gt;&lt;br/&gt;
Please note that a quick-fix for converting  &lt;code&gt;module.export&lt;/code&gt; into &lt;code&gt;export&lt;/code&gt; is not available for &lt;code&gt;module.export&lt;/code&gt; inside functions or statements, because &lt;code&gt;export&lt;/code&gt; statements can only be at the top level of a module.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSStringConcatenationToES6Template" displayName="String concatenation is used instead of string template" enabled="true">&lt;html&gt;
&lt;body&gt;
Helps to replace concatenations of strings and references to template strings.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSFunctionExpressionToArrowFunction" displayName="Function expression is used instead of arrow function" enabled="true">&lt;html&gt;
&lt;body&gt;
Helps to replace function expressions with arrow functions.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ES6ConvertVarToLetConst" displayName="&apos;var&apos; used instead of &apos;let&apos; or &apos;const&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;code&gt;var&lt;/code&gt; declarations that are used instead of &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;.&lt;br/&gt;
Both &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are block-scoped and behave more strictly.
&lt;br/&gt;&lt;br/&gt;
It helps to replace all &lt;code&gt;var&lt;/code&gt; declarations with &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; declarations, depending on value semantics.
Declarations might be moved to the top of the function or before the first usage of the variable to avoid Reference errors.
&lt;br/&gt;Check &lt;i&gt;Conservatively convert var with Fix all action&lt;/i&gt; option to prevent any changes in these complex cases when using Fix all action.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Mako">
    <inspection shortName="MakoArgumentListInspection" displayName="Incorrect call arguments" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports discrepancies between declared parameters and actual arguments, as well as
incorrect arguments (e.g. duplicate named arguments) and incorrect argument order.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Cucumber">
    <inspection shortName="CucumberExamplesColon" displayName="Missing &apos;:&apos; after examples keyword" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights examples sections in Cucumber .feature files which do not have &apos;:&apos; after the &lt;strong&gt;Examples&lt;/strong&gt; keyword.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CucumberMissedExamples" displayName="Missing examples section" enabled="true">&lt;html&gt;
&lt;body&gt;
    Highlights scenario outlines in Cucumber .feature files which do not have &apos;Examples&apos; section. &lt;br/&gt;
    Use a quick-fix to automatically create the Examples section with a pre-filled table header.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CucumberTableInspection" displayName="Unused or missing columns in Cucumber tables" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights tables in Examples sections of Cucumber .feature files with unused or missing columns.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GherkinScenarioToScenarioOutline" displayName="Scenario with Examples section" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights Gherkin Scenarios having Examples section&lt;br/&gt;
Use a quick-fix to automatically convert Scenario to Scenario Outline.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CucumberUndefinedStep" displayName="Undefined step" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights steps in Cucumber (or some other Gherkin) .feature files which do not have a matching step definitions. &lt;br/&gt;
Use a quick-fix to automatically create a new step definition.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GherkinBrokenTableInspection" displayName="Gherkin table is broken" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights tables if it contains at least one row with amount of cell different from amount of cell of table&apos;s header.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GherkinMisplacedBackground" displayName="Misplaced background section" enabled="true">&lt;html&gt;
&lt;body&gt;
Background section must be before any Scenario
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Accessibility">
    <inspection shortName="HtmlRequiredTitleAttribute" displayName="Missing required &apos;title&apos; attribute" enabled="false">&lt;html&gt;
&lt;body&gt;
Highlights &lt;code&gt;frame&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt;, &lt;code&gt;dl&lt;/code&gt;, and &lt;code&gt;a&lt;/code&gt; tags without required title attributes (WCAG 2.0: &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H33.html&quot;&gt;H33&lt;/a&gt;, &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H40.html&quot;&gt;H40&lt;/a&gt;, and &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H64.html&quot;&gt;H64&lt;/a&gt;) and offers a quick-fix for adding a title.

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlRequiredLangAttribute" displayName="Missing required &apos;lang&apos; attribute" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;lang&lt;/code&gt; (or &lt;code&gt;xml:lang&lt;/code&gt;) attribute for the &lt;code&gt;html&lt;/code&gt; tag (WCAG 2.0: &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H57.html&quot;&gt;H57&lt;/a&gt;) and offers a quick-fix for adding the attribute. This attribute should state the default language of a document.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlRequiredAltAttribute" displayName="Missing required &apos;alt&apos; attribute" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;alt&lt;/code&gt; attribute for the &lt;code&gt;applet&lt;/code&gt; and &lt;code&gt;img&lt;/code&gt; tags and the &lt;code&gt;area&lt;/code&gt; elements of image maps (WCAG 2.0: &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H24.html&quot;&gt;H24&lt;/a&gt;, &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H35.html&quot;&gt;H35&lt;/a&gt;, &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H36.html&quot;&gt;H36&lt;/a&gt;, &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H37.html&quot;&gt;H37&lt;/a&gt;) and offers a quick-fix for adding the attribute. This attribute should provide a text alternative for the content of the tag. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlRequiredTitleElement" displayName="Missing required &apos;title&apos; element" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;title&lt;/code&gt; element inside the &lt;code&gt;head&lt;/code&gt; section (WCAG 2.0: &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H25.html&quot;&gt;H25&lt;/a&gt;) and offers a quick-fix for adding the tag. This title should describe the document.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlRequiredSummaryAttribute" displayName="Missing required &apos;summary&apos; attribute" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports a missing &lt;code&gt;summary&lt;/code&gt; attribute for the &lt;code&gt;table&lt;/code&gt; tag (WCAG 2.0: &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H73.html&quot;&gt;H73&lt;/a&gt;) and offers a quick-fix for adding the summary.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlFormInputWithoutLabel" displayName="Missing associated label" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights form elements (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;, and &lt;code&gt;select&lt;/code&gt;) without required associated labels (WCAG 2.0: &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/H44.html&quot;&gt;H44&lt;/a&gt;) and offers a quick-fix for creating a new label.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Code quality tools">
    <inspection shortName="JSLint" displayName="JSLint" enabled="false">&lt;html&gt;
&lt;body&gt;
Runs &lt;b&gt;&lt;a href=&quot;http://jslint.com&quot;&gt;JSLint&lt;/a&gt;&lt;/b&gt; validator for specified JavaScript file.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Stylelint" displayName="Stylelint" enabled="false">&lt;html&gt;
&lt;body&gt;
Runs &lt;b&gt;&lt;a href=&quot;http://stylelint.io&quot;&gt;Stylelint&lt;/a&gt;&lt;/b&gt; validator for specified stylesheet file.
&lt;br/&gt;&lt;br/&gt;
The severity level of the inspection is applied only for the &apos;Inspect code...&apos; action.
Severity levels used in the editor can be configured in the &lt;a href=&quot;https://stylelint.io/user-guide/configuration/&quot;&gt;Stylelint configuration file&lt;/a&gt; for each individual rule.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Jscs" displayName="JSCS" enabled="false">&lt;html&gt;
&lt;body&gt;

Runs &lt;b&gt;&lt;a href=&quot;https://github.com/jscs-dev/node-jscs&quot;&gt;JSCS&lt;/a&gt;&lt;/b&gt; - JavaScript Code Style checker for specified JavaScript file.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GjsLint" displayName="Closure Linter" enabled="false">&lt;html&gt;
&lt;body&gt;
Runs &lt;b&gt;&lt;a href=&quot;http://code.google.com/p/closure-linter&quot;&gt;Closure Linter&lt;/a&gt;&lt;/b&gt; that enforces the guidelines set by the &lt;a
    href=&quot;https://google.github.io/styleguide/jsguide&quot;&gt;Google JavaScript Style Guide&lt;/a&gt; . The linter handles
style issues so that you can focus on the code.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StandardJS" displayName="Standard Code Style" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports errors according to &lt;a href=&quot;http://standardjs.com&quot;&gt; JavaScript Standard Style&lt;/a&gt;.
&lt;br/&gt;&lt;br/&gt;
The severity level of the inspection is applied only for the &apos;Inspect code...&apos; action.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Eslint" displayName="ESLint" enabled="false">&lt;html&gt;
&lt;body&gt;
Runs the &lt;b&gt;&lt;a href=&quot;https://eslint.org&quot;&gt;ESLint&lt;/a&gt;&lt;/b&gt; linter.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href=&quot;http://eslint.org/docs/user-guide/configuring&quot;&gt;ESLint configuration file&lt;/a&gt;.
Uncheck &quot;Use rule severity from the configuration file&quot; to use the same severity configured in this inspection for all ESLint rules.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSHint" displayName="JSHint" enabled="false">&lt;html&gt;
&lt;body&gt;
Runs &lt;b&gt;&lt;a href=&quot;http://jshint.com&quot;&gt;JSHint&lt;/a&gt;&lt;/b&gt; validator for specified JavaScript file.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Assignment issues">
    <inspection shortName="JSAssignmentUsedAsCondition" displayName="Assignment used as condition" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports an assignment being
used as the condition of an &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;, &lt;b&gt;for&lt;/b&gt; or
&lt;b&gt;do&lt;/b&gt; statement. While occasionally intended,
this usage is confusing, and often indicates a typo
(&lt;b&gt;=&lt;/b&gt; instead of &lt;b&gt;==&lt;/b&gt;).
&lt;!-- tooltip end --&gt;
&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToForLoopParameterJS" displayName="Assignment to &apos;for&apos; loop parameter" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of assignment to a
                variable declared as a JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt; loop parameter.
                While occasionally intended, this construct can be extremely confusing, and is often the result of a
                programmer error.

&lt;/body&gt;
&lt;/html&gt;
�</inspection>
    <inspection shortName="AssignmentToFunctionParameterJS" displayName="Assignment to function parameter" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of assignment to a
                variable declared as a JavaScript function parameter. It also reports any attempt to increment or
                decrement the variable.
                While occasionally intended, this construct can be extremely confusing, and is often the result of a
                programmer error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NestedAssignmentJS" displayName="Nested assignment" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any instances of JavaScript assignment expressions nested inside other expressions.  While admirably terse,
such expressions may be confusing, and violate the general design priniciple that a given construct should do precisely one thing.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AssignmentResultUsedJS" displayName="Result of assignment used" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports assignment expressions where the result of the assignment is
                used in a containing expression. Such assignments are often indications of coding errors
                such as using &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;=&lt;/font&gt;&lt;/b&gt; instead of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;==&lt;/font&gt;&lt;/b&gt;.
                Morever, they can result in confusion due to order
                of operations, as evaluation of the assignment may effect the outer expression in unexpected
                ways.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SillyAssignmentJS" displayName="Variable is assigned to itself" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any assignments of the form &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;x = x&lt;/font&gt;&lt;/b&gt; in JavaScript content.  These are pointless,
                and usually indicate programmer error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReplaceAssignmentWithOperatorAssignmentJS" displayName="Assignment replaceable with operator assignment" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports instances of assignment operations in JavaScript content which can be replaced
                by operator-assignment. Code using operator assignment may be clearer, and theoretically more
                performant.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Potentially confusing code constructs">
    <inspection shortName="WithStatementJS" displayName="&apos;with&apos; statement" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;with&lt;/font&gt;&lt;/b&gt; statements
                in Javascript content.  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;with&lt;/font&gt;&lt;/b&gt;
                statements result in potentially confusing implicit bindings, and may behave
                strangely in setting new variables.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AnonymousFunctionJS" displayName="Anonymous function" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports anonymous JavaScript functions. While often very handy,
                anonymous functions may be confusing, and are discouraged in some coding standards.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConfusingFloatingPointLiteralJS" displayName="Confusing floating point literal" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any JavaScript floating point numbers which do not have a decimal point, numbers before the decimal point,
and numbers after the decimal point.  Such literals may be confusing, and violate several coding standards.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="VoidExpressionJS" displayName="&apos;void&apos; expression" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; expressions
                in JavaScript statements.  Since &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; behaves
                completely differently in JavaScript and Java, these expressions maybe confusing.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CommaExpressionJS" displayName="Comma expression" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript comma expressions.  Comma
                expressions are often a sign of overly clever code, and may lead to subtle bugs.
                Comma expressions in the initializer or update section of a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt;
                loop are ignored by this inspection.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConditionalExpressionJS" displayName="Conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports ternary conditional expressions.  Some coding standards
                prohibit such expressions, in favor of explicit &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;
                statements.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NestedConditionalExpressionJS" displayName="Nested conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports ternary conditional expressions contained within other ternary conditions.
                Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional
                logic.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NegatedIfStatementJS" displayName="Negated &apos;if&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statements
                in JavaScript content which contain &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;else&lt;/font&gt;&lt;/b&gt; branches and whose conditions are negated.
                Flipping the order of the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;
                else&lt;/font&gt;&lt;/b&gt;
                branches will usually increase the clarity of such statements.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MagicNumberJS" displayName="Magic number" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports all instances of &quot;magic numbers&quot;, literal numeric constants used without declaration,
                used in JavaScript code.
&quot;Magic numbers&quot; can result in code whose intention is extremely unclear, and may result in errors if a &quot;magic
number&quot; is changed in one code location but not another.  The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
0.0 and 1.0 are not reported by this inspection.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PointlessArithmeticExpressionJS" displayName="Pointless arithmetic expression" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of pointless arithmetic
                expressions in JavaScript content. Such expressions include adding or subtracting zero, multiplying by
                zero or one,
                division by one, and shift by zero. Such expressions may be the result of automated refactorings
                not completely followed through to completion, and in any case are unlikely to be what the developer
                intended to do.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EmptyStatementBodyJS" displayName="Statement with empty body" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports instances of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt;,
                and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;with&lt;/font&gt;&lt;/b&gt; statements whose bodies are empty.  While
                occasionally useful, such statements are often the result of typos, and may cause confusion.
                &lt;p&gt;
                    Use the checkbox below to select whether statements whose bodies are empty block statements
                    will be reported by this inspection.
                &lt;/p&gt;


&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DynamicallyGeneratedCodeJS" displayName="Execution of dynamically generated JavaScript" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports on any uses of the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;eval&lt;/font&gt;&lt;/b&gt; ,&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;setTimeout&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;setInterval&lt;/font&gt;&lt;/b&gt; functions, or allocation of a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Function&lt;/font&gt;&lt;/b&gt;
                object in JavaScript.  These functions are used to execute arbitrary strings of JavaScript text, often
                dynamically generated.  This can be very confusing, and may be a security risk.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NestedFunctionJS" displayName="Nested function" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports JavaScript functions nested inside other functions.
                While JavaScript allows functions to be nested, such constructs may be confusing.
                Additionally, nested functions are prone to cause difficult-to-diagnose memory
                leaks in certain browsers, including Microsoft Internet Explorer.
                &lt;p&gt;
                    Use the checkbox below to prevent this inspection from reporting anonymous nested functions.
                &lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConfusingPlusesOrMinusesJS" displayName="Confusing sequence of &apos;+&apos; or &apos;-&apos;" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any suspicions combinations of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;+&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;-&lt;/font&gt;&lt;/b&gt;
                characters in JavaScript code (e.g. &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;a+++b&lt;/font&gt;&lt;/b&gt;.  While legal, such sequences are confusing,
                and may have their semantics changed through changes in whitespace.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BlockStatementJS" displayName="Unnecessary &apos;block&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports unnecessary block statements in JavaScript content.  Block statements
                that are not used as the body of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;do&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;with&lt;/font&gt;&lt;/b&gt;,
                or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;try&lt;/font&gt;&lt;/b&gt; statements, or as the
                body of a function declaration are reported.  Since JavaScript blocks do not introduce new scopes
                as is common in Java and other languages, free-standing block statements may be the result of
                code confusion, and may result in subtle bugs.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IncrementDecrementResultUsedJS" displayName="Result of increment or decrement used" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports increment (&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;++&lt;/font&gt;&lt;/b&gt;) or decrement
                (&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;--&lt;/font&gt;&lt;/b&gt;) expressions where the result of the assignment is
                used in a containing expression.  Such assignments can result in confusion due to order
                of operations, as evaluation of the assignment may effect the outer expression in unexpected
                ways.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ES6BindWithArrowFunction" displayName="Suspicious usage of &apos;bind&apos; with arrow function" enabled="true">&lt;html&gt;
&lt;body&gt;
Warns if &lt;code&gt;bind&lt;/code&gt; is used together with arrow function.&lt;br/&gt;
Since arrow functions use lexical &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt; call will have no effect on them.&lt;br/&gt;
Please read more &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this&quot;&gt;here&lt;/a&gt;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyComplexBooleanExpressionJS" displayName="Overly complex boolean expression" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript boolean expressions with too many terms. Such
                expressions may be confusing and bug-prone.
                &lt;p&gt;
                    Use the field provided below to specify the maximum number of terms allowed in an arithmetic
                    expression.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OverlyComplexArithmeticExpressionJS" displayName="Overly complex arithmetic expression" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript arithmetic expressions with too many terms. Such
                expressions may be confusing and bug-prone.
                &lt;p&gt;
                    Use the field provided below to specify the maximum number of terms allowed in an arithmetic
                    expression.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OctalIntegerJS" displayName="Octal Integer" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of octal integer literals in JavaScript code. Some coding standards prohibit the
                use of octal literals, as they may be easily confused with decimal literals.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NegatedConditionalExpressionJS" displayName="Negated conditional expression" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of conditional expressions in JavaScript content whose conditions
                are negated.
                Flipping the order of the conditional expression branches will usually increase the clarity of such
                statements.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CallerJS" displayName="Use of &apos;caller&apos; property" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports on any uses of the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;caller&lt;/font&gt;&lt;/b&gt; property in a JavaScript function.
Use of this property to access the stack frame of the calling method can be extremely confusing, and result in subtle bugs.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Angular">
    <inspection shortName="EmptyEventHandler" displayName="Empty Event Handler" enabled="true">&lt;html&gt;
&lt;body&gt;
Warns about empty &lt;a href=&quot;http://angular.io/&quot;&gt;Angular&lt;/a&gt; event handler
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AngularCliAddDependency" displayName="Angular CLI Add Dependency" enabled="true">&lt;html&gt;
&lt;body&gt;
Suggests using &apos;ng add&apos; command to install the dependency.
&lt;p&gt;&apos;ng add&apos; will use the package manager to download it and invoke a schematic
  which can update your project with configuration changes, add additional dependencies (e.g. polyfills),
  or scaffold package-specific initialization code.
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="TypeScript">
    <inspection shortName="TypeScriptFieldCanBeMadeReadonly" displayName="Field is assigned only in the constructor and can be made readonly" enabled="true">&lt;html&gt;
&lt;body&gt;
If a private field is assigned only in the constructor, it can be made readonly.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptPreferShortImport" displayName="Import can be shortened" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any instances of ES6 imports
whose &apos;from&apos; part can be shortened by importing the parent directory.

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptCheckImport" displayName="Validate imports" enabled="true">&lt;html&gt;
&lt;body&gt;
Validate TypeScript imports
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptSuspiciousConstructorParameterAssignment" displayName="Suspicious parameter assignment in constructor" enabled="true">&lt;html&gt;
&lt;body&gt;
Warns against a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.&lt;br/&gt;
In this case, the corresponding field &lt;i&gt;won&apos;t&lt;/i&gt; be assigned, only the local parameter value is modified.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypescriptExplicitMemberType" displayName="Explicit member types" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights type declarations that do not match the current code style.
&lt;!-- tooltip end --&gt;
&lt;p&gt;
  By default, type declarations are highlighted as redundant when the type can be inferred from context, for example:
&lt;/p&gt;
&lt;p&gt;
  &lt;code&gt;
    var pi: number = 3.14
  &lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;Enabling any of the options below
  inverts this and suggests inserting an explicit type declaration even where the type can be inferred.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptAbstractClassConstructorCanBeMadeProtected" displayName="Abstract class constructor can be made protected" enabled="true">&lt;html&gt;
&lt;body&gt;
Suggests to make the constructor of an abstract class protected (because it is useless to have it public)
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptUMDGlobal" displayName="Reference to a UMD global" enabled="true">&lt;html&gt;
&lt;body&gt;
Report the use of references to a UMD global if the current file is a module.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSEqualityComparisonWithCoercion.TS" displayName="Equality operator may cause type coercion" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports usages of JavaScript equality operators which may cause unexpected type coercions.
It is considered a good practice to use the type-safe equality operators &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;===&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!==&lt;/font&gt;&lt;/b&gt;
instead of their regular counterparts &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;==&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!=&lt;/font&gt;&lt;/b&gt;.

&lt;p&gt;Depending on the option selected, this will either highlight:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    All usages of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;==&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!=&lt;/font&gt;&lt;/b&gt; operators.
  &lt;/li&gt;
  &lt;li&gt;
    All usages except comparison with null. Some code styles allow using &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;x == null&lt;/font&gt;&lt;/b&gt; as a replacement for
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;x === null || x === undefined&lt;/font&gt;&lt;/b&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Only suspicious expressions, such as: &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;==&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!=&lt;/font&gt;&lt;/b&gt; comparisons
    to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;0&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&apos;&apos;&lt;/font&gt;&lt;/b&gt;,
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;null&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true&lt;/font&gt;&lt;/b&gt;,
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false&lt;/font&gt;&lt;/b&gt;, or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;undefined&lt;/font&gt;&lt;/b&gt;.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="TypeScriptAccessibilityCheck" displayName="@private and @protected members accessibility" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that TypeScript &lt;b&gt;private&lt;/b&gt; and &lt;b&gt;protected&lt;/b&gt; members are visible in current context.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptValidateTypes" displayName="Type mismatch" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks TypeScript called function &lt;b&gt;parameters&lt;/b&gt; , &lt;b&gt;return values&lt;/b&gt; , &lt;b&gt;assigned expressions&lt;/b&gt; to be of correct type. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptUnresolvedVariable" displayName="Unresolved JavaScript variable" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks TypeScript referenced &lt;b&gt;variables&lt;/b&gt; and &lt;b&gt;fields&lt;/b&gt; to be valid ones. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TsLint" displayName="TSLint" enabled="false">&lt;html&gt;
&lt;body&gt;
Runs &lt;b&gt;&lt;a href=&quot;https://github.com/palantir/tslint&quot;&gt;TSLint&lt;/a&gt;&lt;/b&gt; - a linter for TypeScript.
&lt;!-- tooltip end --&gt;
&lt;br/&gt;&lt;br/&gt;
The highlighting is based on the rule severity specified in the &lt;a href=&quot;https://palantir.github.io/tslint/usage/configuration/&quot;&gt;TSLint configuration file&lt;/a&gt;.
Uncheck &quot;Use rule severity from the configuration file&quot; to use the same severity configured in this inspection for all TSLint rules.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptValidateJSTypes" displayName="Type mismatch in &apos;any&apos; type context" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks TypeScript called function &lt;b&gt;parameters&lt;/b&gt; , &lt;b&gt;return values&lt;/b&gt; , &lt;b&gt;assigned expressions&lt;/b&gt; to be of correct type in &apos;any&apos; type context. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptMissingAugmentationImport" displayName="Missing augmentation import" enabled="true">&lt;html&gt;
&lt;body&gt;
Check that current file imports the augmentation module
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptConfig" displayName="Validate tsconfig.json" enabled="true">&lt;html&gt;
&lt;body&gt;
Validate usages of tsconfig.json properties
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeScriptUnresolvedFunction" displayName="Unresolved JavaScript function" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks TypeScript called &lt;b&gt;functions&lt;/b&gt; to be valid ones. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Pyramid">
    <inspection shortName="PyramidSetupInspection" displayName="Project is not installed for development" enabled="true">&lt;html&gt;
&lt;body&gt;
To install a newly created project for development, you should use the Python interpreter to invoke the command `python setup.py develop`
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Probable bugs">
    <inspection shortName="CssFloatPxLength" displayName="Float px length" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects float values of pixel lengths. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssNoGenericFontName" displayName="Missing generic font name" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection verifies that the CSS &lt;b&gt;font-family&lt;/b&gt; property contains a generic font name as a fallback alternative.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSComparisonWithNaN" displayName="Comparison with NaN" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks code for comparisons with NaN. Comparisons like &lt;b&gt;expr == NaN&lt;/b&gt; or &lt;b&gt;expr === NaN&lt;/b&gt; are always evaluated to &lt;b&gt;false&lt;/b&gt; . &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DivideByZeroJS" displayName="Divide by zero" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of division by zero or remainder by zero in JavaScript code.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="TextLabelInSwitchStatementJS" displayName="Text label in &apos;switch&apos; statement" enabled="false">&lt;html&gt;
&lt;body&gt;


                Reports any instances of labelled statements inside of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements.
While occasionally intended, this construction is often the result of a typo.

&lt;pre&gt;
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt;(x)
    {
        &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;case&lt;/font&gt;&lt;/b&gt; 1:
        case2:   //typo!
        &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;case&lt;/font&gt;&lt;/b&gt; 3:
            &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;break&lt;/font&gt;&lt;/b&gt;;
    }
&lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="InfiniteRecursionJS" displayName="Infinite recursion" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any instances of JavaScript functions which must either recurse
infinitely or throw an exception.  functions reported by this inspection can not
return normally.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSEqualityComparisonWithCoercion" displayName="Equality operator may cause type coercion" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports usages of JavaScript equality operators which may cause unexpected type coercions.
It is considered a good practice to use the type-safe equality operators &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;===&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!==&lt;/font&gt;&lt;/b&gt;
instead of their regular counterparts &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;==&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!=&lt;/font&gt;&lt;/b&gt;.

&lt;p&gt;Depending on the option selected, this will either highlight:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    All usages of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;==&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!=&lt;/font&gt;&lt;/b&gt; operators.
  &lt;/li&gt;
  &lt;li&gt;
    All usages except comparison with null. Some code styles allow using &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;x == null&lt;/font&gt;&lt;/b&gt; as a replacement for
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;x === null || x === undefined&lt;/font&gt;&lt;/b&gt;.
  &lt;/li&gt;
  &lt;li&gt;
    Only suspicious expressions, such as: &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;==&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!=&lt;/font&gt;&lt;/b&gt; comparisons
    to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;0&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&apos;&apos;&lt;/font&gt;&lt;/b&gt;,
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;null&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true&lt;/font&gt;&lt;/b&gt;,
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false&lt;/font&gt;&lt;/b&gt;, or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;undefined&lt;/font&gt;&lt;/b&gt;.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CssUnitlessNumber" displayName="Missing measure unit" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights CSS number property values for which no units
of measurement are specified.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSTypeOfValues" displayName="Typeof comparing with non-standard value" enabled="true">&lt;html&gt;
&lt;body&gt;
The inspection reports when literal string in a comparing with &lt;b&gt;typeof&lt;/b&gt; is not one of the standard types:
&quot;undefined&quot;, &quot;object&quot;, &quot;boolean&quot;, &quot;number&quot;, &quot;string&quot;, &quot;function&quot;, &quot;symbol&quot;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ForLoopThatDoesntUseLoopVariableJS" displayName="&apos;for&apos; loop where update or condition does not use loop variable" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt; loops where
                the condition or
                update does not use the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt; loop variable.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CoffeeScriptSillyAssignment" displayName="Variable is assigned to itself" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any assignments of the form &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;x = x&lt;/font&gt;&lt;/b&gt; in CoffeeScript content.  These are pointless,
and usually indicate programmer error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ObjectAllocationIgnoredJS" displayName="Result of object allocation ignored" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any instances of JavaScript object allocation where the object allocated ignored.
Such allocation expressions are legal JavaScript, but are usually either inadvertant, or
evidence of a very odd object initialization strategy.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CoffeeScriptInfiniteLoop" displayName="Infinite loop statement" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font
    color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt;,
or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;do&lt;/font&gt;&lt;/b&gt; statements which
can only exit by throwing an exception. While such statements may be correct, they
are often a symptom of coding errors.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSIgnoredPromiseFromCall" displayName="Result of method call returning a promise is ignored" enabled="true">&lt;html&gt;
&lt;body&gt;
  Reports function calls that return a &lt;b&gt;Promise&lt;/b&gt; that is not later used.
  These are usually unintended and indicate an error.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssMissingComma" displayName="Missing comma" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects missing comma between selectors at the end of line.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JSConstructorReturnsPrimitive" displayName="Constructor returns primitive value" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that function recognized as constructor does not return primitive values.
When called with &lt;b&gt;new&lt;/b&gt; , this value will be lost and object will be returned instead. To avoid warnings, you can explicitly specify
function&apos;s return type with &lt;b&gt;@return&lt;/b&gt; tag. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonShortCircuitBooleanExpressionJS" displayName="Non short-circuit boolean expression" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports on any uses in JavaScript code of the non-short-circuit forms of boolean &apos;and&apos; and &apos;or&apos; ( &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&amp;&lt;/font&gt;&lt;/b&gt;
and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;|&lt;/font&gt;&lt;/b&gt; ).  The non-short-circuit versions are occasionally useful, but
their presence is often due to typos of the short-circuit forms ( &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&amp;&amp;&lt;/font&gt;&lt;/b&gt;
and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;||&lt;/font&gt;&lt;/b&gt; ), and may lead to subtle bugs.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="InfiniteLoopJS" displayName="Infinite loop statement" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font
                    color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt;,
                or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;do&lt;/font&gt;&lt;/b&gt; statements which
                can only exit by throwing an exception. While such statements may be correct, they
                are often a symptom of coding errors.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CoffeeScriptLiteralNotFunction" displayName="Literal is not a function" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports when literal expression used as function call.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CoffeeScriptArgumentsOutsideFunction" displayName="Arguments object outside function" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks if arguments object used outside function
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CoffeeScriptSwitchStatementWithNoDefaultBranch" displayName="&apos;switch&apos; statement with no default branch" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements in CoffeeScript content which
lack &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;default&lt;/font&gt;&lt;/b&gt; branches.  Such statements
may result in difficult bugs, if unexpected cases are silently ignored.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSConsecutiveCommasInArrayLiteral" displayName="Consecutive commas in array literal" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that array literal doesn&apos;t contain consecutive commas. Skipped element takes &lt;b&gt;undefined&lt;/b&gt; value,
but it could be done unintentionally, e.g. when commas are at the end of one line and at the beginning of the following. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CoffeeScriptModulesDependencies" displayName="Missing import statement" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that all modules are referenced through import statements.
&lt;p&gt;Suggests inserting the import statement.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="ReST">
    <inspection shortName="RestRoleInspection" displayName="Role is not defined" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects undefined roles.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Buildout">
    <inspection shortName="BuildoutUnresolvedPartInspection" displayName="Buildout config unresolved part inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unresolved buildout parts.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="File Watchers">
    <inspection shortName="TaskProblemsInspection" displayName="File watcher problems" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights errors parsed with output filters from File Watcher.
&lt;p&gt;
File Watcher tracks changes in files and executes a command when they change.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Flow type checker">
    <inspection shortName="FlowJSError" displayName="Flow errors" enabled="false">&lt;html&gt;
&lt;body&gt;
Reports errors from &lt;b&gt;&lt;a href=&quot;https://flowtype.org/&quot;&gt;Flow&lt;/a&gt;&lt;/b&gt; in Inspect code.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FlowJSCoverage" displayName="Code is not covered by Flow" enabled="false">&lt;html&gt;
&lt;body&gt;
Checks that JavaScript code is covered by the Flow type checker. 
To use this inspection, the Flow executable must be configured in &lt;em&gt;Settings | Languages &amp; Frameworks | JavaScript&lt;/em&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FlowJSConfig" displayName="Missing .flowconfig" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that there’s a &lt;em&gt;.flowconfig&lt;/em&gt; file in the project that covers a JavaScript file with the &lt;code&gt;// @flow&lt;/code&gt; flag.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FlowJSFlagCommentPlacement" displayName="Flow flag is misplaced" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks that the &lt;code&gt;// @flow&lt;/code&gt; flag is located on the top of the file – otherwise this file will not be checked by Flow.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Haml">
    <inspection shortName="HamlNestedTagContent" displayName="Illegal nesting" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks that HAML tag has content only on the same line or has it nested.&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Error handling">
    <inspection shortName="EmptyCatchBlockJS" displayName="Empty &apos;catch&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt; blocks in Javascript content.
                Empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt;
                blocks are a sign that errors are simply being ignored, rather than properly handled.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThrowFromFinallyBlockJS" displayName="&apos;throw&apos; inside &apos;finally&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;throw&lt;/font&gt;&lt;/b&gt; statements inside of
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt;
                blocks. While occasionally intended, such &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;throw&lt;/font&gt;&lt;/b&gt; statements may mask
                exceptions thrown, and
                tremendously complicate debugging.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedCatchParameterJS" displayName="Unused &apos;catch&apos; parameter" enabled="false">&lt;html&gt;
&lt;body&gt;

Reports any JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt; parameters that are unused in their
corresponding blocks.  This inspection will not report any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt; parameters
named &quot;ignore&quot; or &quot;ignored&quot;.
&lt;p&gt;
    Use the checkbox below to disable this inspection for &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt;
    blocks with comments.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReturnFromFinallyBlockJS" displayName="&apos;return&apos; inside &apos;finally&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements inside of
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt;
                blocks in JavaScript content. While occasionally intended, such &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements may mask
                exceptions thrown, and
                tremendously complicate debugging.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EmptyFinallyBlockJS" displayName="Empty &apos;finally&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt; blocks in Javascript content.
                Empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt; are usually the result of a coding error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ContinueOrBreakFromFinallyBlockJS" displayName="&apos;continue&apos; or &apos;break&apos; inside &apos;finally&apos; block" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;break&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font
                    color=&quot;#000080&quot;&gt;continue&lt;/font&gt;&lt;/b&gt; statements
                inside of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt;
                blocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and
                tremendously complicate debugging.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EmptyTryBlockJS" displayName="Empty &apos;try&apos; block" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;try&lt;/font&gt;&lt;/b&gt; blocks in Javascript content.
                Empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;try&lt;/font&gt;&lt;/b&gt; is usually the result of a coding error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ExceptionCaughtLocallyJS" displayName="Exception used for local control-flow" enabled="true">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;throw&lt;/font&gt;&lt;/b&gt; statements
                whose exceptions are always
                caught by containing &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;try&lt;/font&gt;&lt;/b&gt; statements. Using &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;
                throw&lt;/font&gt;&lt;/b&gt;
                statements as a &quot;goto&quot; to change the local flow of control is likely to be confusing.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="JavaScript function metrics">
    <inspection shortName="FunctionWithMultipleReturnPointsJS" displayName="Function with multiple return points" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript functions have multiple return points.
                Some coding standards warn against functions with multiple returns, as they may make functions
                more difficult to understand and maintain.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FunctionWithMultipleLoopsJS" displayName="Function with multiple loops" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript functions containing multiple loop statements. 

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ParametersPerFunctionJS" displayName="Function with too many parameters" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript functions with too many parameters.
                Functions with too many parameters are often an indication of design weakness.
                &lt;p&gt;
                    Use the field provided below to specify the maximum acceptable number of parameters a function
                    might have.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreeNegationsPerFunctionJS" displayName="Function with more than three negations" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports JavaScript functions with three or more negation operations (&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;
                !&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!=&lt;/font&gt;&lt;/b&gt;).
                Such functions may be unnecessarily confusing.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StatementsPerFunctionJS" displayName="Overly long function" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of overly long JavaScript functions.
                Function length is calculated by counting up the number of non-empty statements in the function.
                Functions that are too long are error-prone, and difficult to test.
                &lt;p&gt;
                    Use the field provided below to specify the maximum acceptable number of statements a function
                    might have.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NestingDepthJS" displayName="Overly nested function" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript functions whose bodies are contain statements
                too deeply nested within other statements.
                Functions with too much statement
                nesting may be confusing, and are a good sign that refactoring may be necessary.
                &lt;p&gt;
                    Use the field provided below to specify the maximum acceptable nesting depth a function might have.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CyclomaticComplexityJS" displayName="Overly complex function" enabled="false">&lt;html&gt;
&lt;body&gt;

                Reports any instances of JavaScript functions that have too high a cyclomatic complexity.
                Cyclomatic complexity is basically a measurement of the number of branching points in a function. Functions
                with too high a cyclomatic complexity may be confusing and difficult to test.
                &lt;p&gt;
                    Use the field provided below to specify the maximum acceptable cyclomatic complexity a function
                    might have.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="CSS">
    <inspection shortName="CssReplaceWithShorthandUnsafely" displayName="Properties may probably be replaced with a shorthand" enabled="true">&lt;html&gt;
&lt;body&gt;
If a CSS ruleset contains a number of longhand properties that do not constitute a complete set then this inspection suggests transforming the properties into a shorthand form.
&lt;br/&gt;&lt;br/&gt;
For example, 2 properties: &lt;code&gt;outline-color&lt;/code&gt; and &lt;code&gt;outline-style&lt;/code&gt; may be replaced with a single &lt;code&gt;outline&lt;/code&gt; one.
However such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.
In this example, switching to the &lt;code&gt;outline&lt;/code&gt; shorthand means that &lt;code&gt;outline-width&lt;/code&gt; is also set to its initial value, which is &lt;code&gt;medium&lt;/code&gt;.
&lt;br/&gt;&lt;br/&gt;
This inspection doesn&apos;t handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the &apos;Properties may be safely replaced with a shorthand&apos; inspection instead.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssConvertColorToHexInspection" displayName="RGB color function instead of #HEX representation" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects CSS colors which are defined as CSS rgb() function and provides an
intention to convert such values to its HEX representation. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssReplaceWithShorthandSafely" displayName="Properties may be safely replaced with a shorthand" enabled="true">&lt;html&gt;
&lt;body&gt;
If a CSS ruleset contains a complete set of longhand properties then this inspection suggests transforming them into a shorthand form.
&lt;br/&gt;&lt;br/&gt;
For example, 4 properties: &lt;code&gt;padding-top&lt;/code&gt;, &lt;code&gt;padding-right&lt;/code&gt;, &lt;code&gt;padding-bottom&lt;/code&gt;, and &lt;code&gt;padding-left&lt;/code&gt;
may be safely replaced with a single &lt;code&gt;padding&lt;/code&gt; property.
&lt;br/&gt;&lt;br/&gt;
Note that this inspection doesn&apos;t show up if the set of longhand properties is incomplete (e.g. only 3 &lt;code&gt;padding-xxx&lt;/code&gt; properties in a ruleset)
because switching to a shorthand may change the result. For such cases consider the &apos;Properties may probably be replaced with a shorthand&apos; inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssUnusedSymbol" displayName="Unused CSS selector" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection detects unused CSS classes or IDs within a file. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssOverwrittenProperties" displayName="Overwritten property value" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights CSS properties, which are being overwritten in the same ruleset block. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CssConvertColorToRgbInspection" displayName="#HEX color representation instead of RGB color function" enabled="false">&lt;html&gt;
&lt;body&gt;
This inspection detects CSS colors which are defined as HEX, and provides a quickfix action to convert such values to a CSS rgb() function
call. &lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Spelling">
    <inspection shortName="SpellCheckingInspection" displayName="Typo" enabled="true">&lt;html&gt;
&lt;body&gt;

Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Google App Engine (Python)">
    <inspection shortName="Query_restricted" displayName="Query does not comply with query restrictions" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports GQL queries which do not comply with the restrictions for queries allowed on the Google App Engine server.
See the &lt;a href=&quot;http://code.google.com/appengine/docs/python/datastore/queriesandindexes.html#Restrictions_on_Queries&quot;&gt;App Engine documentation&lt;/a&gt;
for more information.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AppEngineThreadsafeCGIHandlerInspection" displayName="Threadsafe cannot be enabled with CGI handler" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection verifies that threadsafe is not enabled with CGI handler.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="Restricted_Python_calls" displayName="Feature not supported in App Engine sandbox" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports uses of Python features which are restricted by the Google App Engine sandbox and will fail on the production server.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="Query_bound_parameters" displayName="Query does not have required bound parameters" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports GQL queries with bound parameters which don&apos;t have the necessary parameters passed to the query method call.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="Query_index_required" displayName="Query does not have required index" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports GQL queries for which an index is not defined in index.yaml. Such queries will fail on the production server.
A quickfix allows you to add the necessary index definitions.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AppEngineThreadsafeInspection" displayName="Threadsafe must be present and set to either &apos;yes&apos; or &apos;no&apos;" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection verifies that threadsafe is present and set to either &amp;quot;yes&amp;quot; or &amp;quot;no&amp;quot;.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AppEngineDeprecatedRuntimeInspection" displayName="Used deprecated Python 2.5 runtime" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about using deprecated Python 2.5 runtime.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Dockerfile">
    <inspection shortName="DockerFileAddOrCopySemantic" displayName="&apos;&apos;ADD&apos;&apos;/&apos;&apos;COPY&apos;&apos; semantics" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights possible problems with arguments of the ADD and COPY commands.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DockerFileArgumentCount" displayName="Wrong number of arguments" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection finds commands with wrong or suspicious number of arguments in Dockerfiles and highlights them in the editor.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DockerFileAssignments" displayName="Spacing of &apos;&apos;key=value&apos;&apos; pairs" enabled="true">&lt;html&gt;
&lt;body&gt;
While it is not exactly specified in the Dockerfile documentation, some combinations of spacing for &apos;key=value&apos; pairs are not actually allowed.
The rules are different for ARG, ENV or LABEL commands. This inspection highlights combinations which are known to be rejected.
&lt;br&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="RELAX NG">
    <inspection shortName="UnresolvedReference" displayName="Unresolved References" enabled="true">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for any unresolved references to named patterns (&quot;define&quot;) in a RELAX-NG file in XML Syntax.
  For unresolved references, a QuickFix is offered to create a corresponding define-element.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by RELAX-NG Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedDefine" displayName="Unused Define" enabled="false">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for any unused named patterns (&quot;define&quot;) in a RELAX-NG file (XML or Compact Syntax) and
  highlights them as unused symbols. This is done with respect to includes from other files, i.e. a define is not
  marked as unused if it is used through an include in another file.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by RELAX-NG Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Django">
    <inspection shortName="DjangoUnresolvedLoadInspection" displayName="Unresolved library inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unresolved tag or filter libraries
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoIncompatibleInspection" displayName="Django inspection that checks template code for django version compatibility" enabled="true">&lt;html&gt;
&lt;body&gt;
Django inspection that checks template code for django version compatibility.
Notable example is &lt;code&gt;url&lt;/code&gt; tag whose first parameter should be in quotes since Django 1.5
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoUnresolvedTagInspection" displayName="Unresolved tag" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unresolved tags
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoOrmInspection" displayName="Django ORM inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection that checks your code for Django ORM errors.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoUnresolvedTemplateReferenceInspection" displayName="Unresolved template reference" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unresolved file references in string literals of &amp;apos;extends&amp;apos; and &amp;apos;include&amp;apos; Django tags.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicatedBlockNamesInspection" displayName="Duplicated block names" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights duplicated block names in Django templates.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoBrokenLineCommentInspection" displayName="Broken line comment" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports #} tokens in Django templates (line comment ends) which do not have a matching line comment start.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoUnresolvedStaticReferenceInspection" displayName="Unresolved static reference" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unresolved references to static resources
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoRelationInspection" displayName="Django relation inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights incorrect relation expressions in Django templates
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoUnresolvedUrlInspection" displayName="Django inspection that checks {% url %} tag urls are resolved" enabled="false">&lt;html&gt;
&lt;body&gt;
Django inspection that checks &amp;quot; &lt;code&gt;{% url %}&lt;/code&gt; &quot; tag&apos;s url argument and makes sure it could be resolved (i.e. exists in
urls.py, views.py etc)
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoCloseTagInspection" displayName="Mismatched opening and closing tags" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection verifies that opening tags in Django templates are correctly matched by closing tags.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DjangoUnresolvedFilterInspection" displayName="Unresolved filter" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights unresolved filters in Django templates.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DjangoUrlArgumentsInspection" displayName="Django inspection that checks {% url %} tag for required arguments" enabled="true">&lt;html&gt;
&lt;body&gt;
Django inspection that checks &amp;quot; &lt;code&gt;{% url %}&lt;/code&gt; &quot; tag for required arguments.
It ensures that all arguments are passed correctly.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsTagPositionInspection" displayName="Misplaced {% extends %} tag" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights &amp;apos;{% extends %}&amp;apos; tag which is not the first tag in a Django template.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EndBlockNamesInspection" displayName="Django endblock name doesn&apos;t match inspection" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection highlights mismatching block names in Django templates.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="XML">
    <inspection shortName="XmlInvalidId" displayName="Unresolved ID" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks for unresolved &quot;id&quot; attributes in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlDuplicatedId" displayName="Duplicate ID" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks for duplicate &quot;id&quot; attributes in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlDeprecatedElement" displayName="Deprecated elements" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks for deprecated XML elements.
&lt;p&gt;The elements can be marked by XML comment or documentation tag with text &quot;deprecated&quot;.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckTagEmptyBody" displayName="XML tag empty body" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports &lt;b&gt;empty&lt;/b&gt; tag body.
The validation works in XML / JSP / JSPX / HTML/ XHTML file types. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckDtdRefs" displayName="Unresolved DTD reference" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks consistency of &lt;b&gt;DTD&lt;/b&gt; specific references, e.g. references to XML entity or to DTD element declaration.
The validation works in DTD or XML file types. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckXmlFileWithXercesValidator" displayName="File does not pass external validation" enabled="true">&lt;html&gt;
&lt;body&gt;
Thoroughly checks XML files for DTD / schema compliance using Xerces validator.
The validation works in XML or XHTML file types. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlPathReference" displayName="File path resolving in XML" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights unresolved file references in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlUnboundNsPrefix" displayName="Unbound XML namespace prefix" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks for unbound namespace prefixes in XML.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlUnusedNamespaceDeclaration" displayName="Unused XML schema declaration" enabled="true">&lt;html&gt;
&lt;body&gt;
Checks for unused namespace declarations and location hints in XML
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlDefaultAttributeValue" displayName="Redundant default attribute value assignment" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks for redundant default XML attribute value assignment.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlHighlighting" displayName="XML highlighting" enabled="true">&lt;html&gt;
&lt;body&gt;
Highlights XML validation problems in the results of batch code inspection.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlWrongRootElement" displayName="Wrong root element" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks if root tag name is the same as in &amp;lt;doctype&amp;gt;. &lt;br&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Internationalization">
    <inspection shortName="NonAsciiCharacters" displayName="Non-ASCII characters" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection warns you of the code accidentally written in the wrong encoding.&lt;br&gt;

For example, &lt;br&gt;
&lt;ul&gt;
  &lt;li&gt;Non-ASCII characters used in the names/strings/comments or&lt;/li&gt;
  &lt;li&gt;Identifiers written in different languages
    (e.g. when in the variable &quot;&lt;code&gt;my&lt;span color=&quot;red&quot;&gt;C&lt;/span&gt;ollection&lt;/code&gt;&quot;
    the letter &lt;code&gt;&lt;span color=&quot;red&quot;&gt;C&lt;/span&gt;&lt;/code&gt; written in Cyrillic) or&lt;/li&gt;
  &lt;li&gt;Unicode symbols used in comments or strings
    (e.g. long dashes and arrows in the comment
    &quot;&lt;code&gt;// a &lt;span color=&quot;red&quot;&gt;→&lt;/span&gt; !a &lt;span color=&quot;red&quot;&gt;—&lt;/span&gt; please note&lt;/code&gt;&quot;)&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LossyEncoding" displayName="Lossy encoding" enabled="true">&lt;html&gt;
&lt;body&gt;

This inspection warns you of characters that the current document encoding is incapable to represent. &lt;br&gt;

For example, when you are &lt;br&gt;
&lt;ul&gt;
  &lt;li&gt;typing international characters in a document configured to &lt;b&gt;US-ASCII&lt;/b&gt; charset. Some characters will be lost on save.&lt;/li&gt;
  &lt;li&gt;or loading &lt;b&gt;UTF-8&lt;/b&gt;-encoded file using &lt;b&gt;ISO-8859-1&lt;/b&gt; one-byte charset. Some characters will be displayed incorrectly.&lt;/li&gt;
&lt;/ul&gt;

You fix this by changing the file encoding,
either by specifying the encoding directly in the file, e.g. by editing &lt;b&gt;encoding=&lt;/b&gt; attribute in the XML prolog of XML file,
or configuring the &lt;b&gt;Settings|Project Settings|File Encodings&lt;/b&gt; .

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Bitwise operation issues">
    <inspection shortName="IncompatibleMaskJS" displayName="Incompatible bitwise mask operation" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any instances of JavaScript bitwise mask expressions which are guaranteed to
evaluate to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false&lt;/font&gt;&lt;/b&gt; in JavaScript code.
Expressions checked are of the form &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&lt;i&gt;(var &amp; constant1) == constant2&lt;/i&gt;&lt;/font&gt;&lt;/b&gt; or
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&lt;i&gt;(var | constant1) == constant2&lt;/i&gt;&lt;/font&gt;&lt;/b&gt;, where &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&lt;i&gt;constant1&lt;/i&gt;&lt;/font&gt;&lt;/b&gt;
and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&lt;i&gt;constant2&lt;/i&gt;&lt;/font&gt;&lt;/b&gt; are  incompatible bitmask constants.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PointlessBitwiseExpressionJS" displayName="Pointless bitwise expression" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any instances of pointless bitwise
expressions in JavaScript.  Such expressions include &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;and&lt;/font&gt;&lt;/b&gt;ing with zero, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;ori&lt;/font&gt;&lt;/b&gt;ng by zero,
and shift by zero.  Such expressions may be the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ShiftOutOfRangeJS" displayName="Shift operation by inappropriate constant" enabled="true">&lt;html&gt;
&lt;body&gt;

Reports any instances of JavaScript shift operations
where the value shifted by is constant and outside of the reasonable range.  Integer
shift operations outside of the range &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;0..31&lt;/font&gt;&lt;/b&gt; are reported.  Shifting by negative or overly large values is almost certainly
a coding error.

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="JSBitwiseOperatorUsage" displayName="Bitwise operator usage" enabled="true">&lt;html&gt;
&lt;body&gt;
Reports suspicious usages of bitwise AND (&quot;&lt;b&gt;&amp;&lt;/b&gt;&quot;) and OR (&quot;&lt;b&gt;|&lt;/b&gt;&quot;) operators.
Usually it is a common typo and user expect a result according to the boolean operations AND (&quot;&lt;b&gt;&amp;&amp;&lt;/b&gt;&quot;) and OR (&quot;&lt;b&gt;||&lt;/b&gt;&quot;).
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Puppet">
    <inspection shortName="PuppetMultipleHashSetParamsPerResourceInstance" displayName="Multiple hash set parameters" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection checks whether two or more hash set parameters (&lt;pre&gt;&lt;code&gt;* =&gt;&lt;/code&gt;&lt;/pre&gt;) are declared in on resource instance.
&lt;!-- tooltip end --&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Puppet4Deprecations" displayName="Deprecated in Puppet 4" enabled="true">&lt;html&gt;
&lt;body&gt;
Language parts deprecated in version 4 of Puppet
&lt;p&gt;
This inspection highlights constructs which are correct in Puppet 3.X and earlier, but deprecated in Puppet 4, such as:
&lt;ul&gt;
  &lt;li&gt;&apos;class&apos; name for classes;&lt;/li&gt;
  &lt;li&gt;Upper case variable names;&lt;/li&gt;
  &lt;li&gt;Qualified variables with underscore&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PuppetUnresolved" displayName="Unresolved symbol" enabled="true">&lt;html&gt;
&lt;body&gt;
This inspection warns about unresolved symbols in puppet files
&lt;!-- tooltip end --&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Puppet3Deprecations" displayName="Deprecated in Puppet 3" enabled="true">&lt;html&gt;
&lt;body&gt;
Language parts deprecated in version 3 of Puppet
&lt;p&gt;
This inspection highlights constructs which are deprecated in Puppet 3, such as:
&lt;ul&gt;
  &lt;li&gt;import statement&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
</inspections>